select.cant.country.contest.guest = select count(distinct country_id)  from user_contest join users using (uid) where cid  = ? and groupd = ?  and country_id not in (select country_id from user_contest join users using (uid) where cid  = ? and groupd <> ?)
select.cant.inst.contest.guest = select count(distinct inst_id)  from user_contest join users using (uid) where cid  = ? and groupd = ?  and inst_id not in (select inst_id from user_contest join users using (uid) where cid  = ? and groupd <> ?);
select.cant.user.contest.guest = select count(*)  from user_contest join users using (uid) where cid  = ? and groupd = ?
select.cant.country.contest = select count(distinct country_id) from user_contest join users using (uid) where cid  = ?
select.cant.inst.contest = select count(distinct inst_id) from user_contest join users using (uid) where cid  = ?
insert.poll=insert into poll(question,answer1,answer2,answer3,answer4,answer5,enabled) values (?,?,?,?,?,?,?)
update.poll=update poll set question=?,answer1=?,answer2=?,answer3=?,answer4=?,answer5=?,enabled=? where pid=?
delete.poll=delete from poll where pid=?
delete.poll.votes=delete from poll_answer where pid=?
toggle.enabled.poll=update poll set enabled = !enabled where pid=?
vote.poll=insert into poll_answer (pid,uid,option) values (?,?,?)
select.poll=select * from poll where pid=?
select.polls=select * from poll order by pid
select.polls.public=select distinct tbl.* from (select poll.*,true as voted,sum(case when option=1 then 1 else 0 end) OVER (partition by pid) as votes1,sum(case when option=2 then 1 else 0 end) over (partition by pid) as votes2,sum(case when option=3 then 1 else 0 end) over (partition by pid) as votes3,sum(case when option=4 then 1 else 0 end) over (partition by pid) as votes4,sum(case when option=5 then 1 else 0 end) over (partition by pid)  as votes5 from poll left join poll_answer using (pid) where enabled) tbl order by pid 
select.polls.public.voted=select distinct tbl.* from (select poll.*,bool_or(case when uid=? then true else false end) over (partition by poll.pid) as voted,sum(case when option=1 then 1 else 0 end) OVER (partition by poll.pid) as votes1,sum(case when option=2 then 1 else 0 end) over (partition by poll.pid) as votes2,sum(case when option=3 then 1 else 0 end) over (partition by poll.pid) as votes3,sum(case when option=4 then 1 else 0 end) over (partition by poll.pid) as votes4,sum(case when option=5 then 1 else 0 end) over (partition by poll.pid)  as votes5 from poll left join poll_answer on (poll.pid = poll_answer.pid) where enabled) tbl order by pid
exist.vote.poll=select exists(select pid from poll_answer where uid=? and pid=?)


select.creator.by.pid=select username from problem join users using (uid) where pid=?
select.language.faq=select language, descripcion  from language where enabled
update.mail.quota=update user_profile set consume_quote = (select (select coalesce(sum(size),0) from internal_mail where (idto = ? and enabled=true) and idfrom = ?) + (select coalesce(sum(size),0) from send_mail where username=?) ) where user_profile.uid=?
insert.problemsource=insert into problem_source (name,author) values(?,?)
insert.psetter.pid=insert into psetter_problem (user_id,problem_id) values (?,?)
access.rule=insert into global_access_rules (rule) values(?)
add.announcement=insert into announcements (content,enabled,username,contest_id) values(?,?,?,?)
add.country.2=insert into country (name,zip,zip_two,website) values(?,?,?,?)
add.country=insert into country (name,zip) values(?,?)
user.by.mail=select username from users join user_profile using (uid) where email=?
update.entries=update entries set text = ? where eid=?
insert.contest.data.1=insert into users (username,password,country_id,inst_id,nick,enabled,update_nick) values (?,?,(select country_id from institution where name = ?),(select inst_id from institution where name = ?),?,true,false)
insert.contest.data.2=insert into team_profile (uid,coach,user_1,user_2,user_3) values (?,?,?,?,?)
insert.contest.data.3=insert into user_contest (uid,cid,groupd) values (?,?,?)
insert.contest.data.4=insert into user_stats_contest (uid,cid) values (?,?)
insert.contest.data.5=insert into authorities (username,authority) values (?,'ROLE_TEAM')
insert.contest.data.6=insert into user_contest (uid,cid,groupd) values (?,?,?)
repoint.contest.2=select contest_submition.cid as cid,contest_submition.testcase as FirstWaCase,contest_submition.accepted,contest_submition.uid,username,contest_submition.pid,submit_id as sid,contest_submition.time as time_used,contest_submition.memory as memory_used,contest_submition.fontsize as font,contest_submition.date,status,language as lang,testcase,min_case as min_time_used, max_case as max_time_used,average_case as avg_time_used,language as lang from contest_submition where cid = ? and contest_submition.enabled = true order by contest_submition.date asc
is.course.submission=select course_id from submition where submit_id = ?
solved.problem.contest=select exists(SELECT submit_id from contest_submition where uid = ? and pid = ? and cid = ? and status = 'Accepted' and virtual = false)
solved.contest.problem.virtual=select exists(SELECT submit_id from contest_submition where uid = ? and pid = ? and cid = ? and status = 'Accepted' and virtual = true)
add.news=insert into news (title,overview,content,username,rate,enabled) values(?,?,?,?,?,?)
add.prob=insert into problem (forum_link,title,title_es,title_pt,description,description_es,description_pt,input,input_es,input_pt,output,output_es,output_pt,input_example,output_example,id_source,comments,comments_es,comments_pt,time,memory,fontsize,contest,uid,enable,case_time_limit,multidata,special_judge) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
delete.contest.submit.cid=delete from contest_submition where cid=?
clean.submition.first.ac=update submition set first_ac = false where pid=? and uid=? and accepted
update.submition.first.ac=update submition set first_ac = true where submit_id = (select min(submit_id) from submition where pid=? and uid=? and accepted)
insert.shared.file=insert into shared_files(name,path,size) values(?,?,?)
insert.user.problem=insert into user_problem(problem_id,user_id) values (?,?)
insert.user.problem.accepted=insert into user_problem(problem_id,user_id,accepted) values (?,?,?)
exist.problemid=select exists(select problem_id from user_problem where problem_id=? and user_id=?)
course.problem.available=select exists(select content_address from chapter_content join chapter using(chapter_id) where course_id = ? and content_address = ? and initdate <= now())
course.score.active=select score_active from course where course_id = ?
course.total.points=SELECT problem_points * (SELECT count(*) from chapter_content join chapter using(chapter_id)  where content_type  = 1 and course_id = ?) from course  where course_id = ?
course.total.points.user=SELECT points from course_users  where course_id = ? and username = ?
current.level.contest=select current_level from user_contest where uid= ? and cid= ?
current.level.username=select current_level from user_contest uc join user u on uc.uid= u.uid where u.username= ?
current.level=select current_level from user_contest where uid= ? and cid= ?
best.solutions.1=select * from (select distinct on (username) submit_id,username,language,time,memory,fontsize,date from submition where status= 'Accepted' and pid= ? and submition.enabled= true and submition.lock= false group by username,time,memory,date,language,fontsize,submit_id having (time= min(time) and memory= min(memory) and date= min(date)) or (time= min(time) and memory= min(memory)) or (time= min(time))) as tbl order by time,memory,date limit 20 offset ?
best.solutions=select submit_id,username,language,time,memory,fontsize,date,see_solutions from submition join users using(username) where status= 'Accepted' and pid= ? and submition.enabled= true and lock= false order by time,memory,fontsize,date asc limit 20 offset ?
build.ranking.acm.virtual.2=SELECT status,pid,uid,extract(year from date),extract(month from date),extract(day from date),extract(hour from date),extract(minutes from date),extract(seconds from date) from contest_submition where cid= ? and contest_submition.date <= (select initdate + (now() - start_time) from individual_virtual_contest join contest using(cid) where cid= ? and individual_virtual_contest.username= ?)  and ((virtual= false and uid != ?) or (virtual= true and (uid= ? or uid in (select uid from virtual_contest_guest join users using(username) where vid= (select father from individual_virtual_contest where username= (select username from users where uid= ?)))))) order by date asc
can.access.submission=select enabled_source_code_view from global_flags
check.maintenance.mode=select maintenance_mode from global_flags
enable.submission=update submition set enabled=? where submit_id=?
enable.submission.cid=update contest_submition set enabled=? where cid=? and submit_id=?
clarification.id=select user_clarification.id_clarification as id,pid,date,username,title,text as description,publicclarification as publics ,general as forall,read as isread,case when clarification.pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle from clarification join users on users.uid= clarification.id_team join user_clarification on clarification.id_clarification= user_clarification.id_clarification where user_clarification.id_clarification= ? and id_contest= ? and teamfor= ?
entry.by.id=select * from entries where eid=?
select.submission.users.all=select submition.status as status, count(submition.status) as y from submition join users on submition.uid = users.uid where submition.status <> 'Unqualified' and submition.status <> 'Judging'  and users.username = ? group by status
count.select.problemsources=select count(*) from problem_source
select.problemsources=select * from problem_source order by name,author limit 20 offset ?
select.problemsources.all=select * from problem_source order by name,author 
select.problemsource.id=select * from problem_source where id_source=?
select.psetters.pid=select distinct uid,username,case when problem_id is null then false else true end  as enabled from (select u.uid,a.username from authorities a join users u using (username) where a.authority = 'ROLE_PSETTER' or a.authority = 'ROLE_SUPER_PSETTER') tbl left join (select * from psetter_problem p where p.problem_id = ? ) pp on tbl.uid = pp.user_id order by username
select.current.psetters.pid=select uid,username from users join psetter_problem pp on uid = user_id where pp.problem_id=?


is.psetter.problem=select exists(select user_id from psetter_problem where user_id=? and problem_id=?)
accepted.in.contest=select accepted from user_contest where cid= ? and uid= ?

update.user.problem.accepted=update user_problem set accepted=? where problem_id=? and user_id=?
reset.event.processing=update submition set event_processed=false where submit_id=?
update.source.error=update source set error=? where sid=?
update.contest.source.error=update contest_source set error=? where sid=?
update.source.error.for.removal=update source set error = null where sid=?
update.problemsources.problem=update problem set id_source=? where id_source=?
change.status=update submition set status=? where submit_id=?
change.status.contest=update contest_submition set status=? where submit_id=?
delete.problemsources.problem=update problem set id_source=null where id_source=?
disable.user=update users set enabled=false where uid=?
update.problemsource=update problem_source set name=?,author=? where id_source=?
update.faq=update faq set answer=?,question=? where id=?
ban.user.course=update course_users set banned = true where username = ? and course_id = ?


contests.running=select cid from contest where initdate < now() and now() < enddate 
coming.contests=select cid,name,registration,enddate,initdate from contest where initdate > now() and enabled= true order by initdate asc limit 50 offset ?
contest.coming.running=select cid,name from contest where enddate > now()
contest.import=select cid,name from contest where enabled= true order by name
contest.languages.import=SELECT lid FROM language join language_contest using(lid) WHERE language.enabled= true and cid= ? ORDER BY language
contest.languages=SELECT lid,language,key,descripcion FROM language join language_contest using(lid) WHERE language.enabled= true and cid= ? ORDER BY language
contest.languages.virtual=SELECT lid,language,key,descripcion FROM language join language_contest using(lid) WHERE language.enabled= true and cid= ? ORDER BY language 
contest.level=select levels from contest where cid= ?
contest.manage.users=select cid,name,enabled,style,registration,contestant,guest_group,grouped from contest where cid= ?
contest.problems=SELECT problem_contest.color as balloon_color,problem_contest.pid,title,level,accu from problem_contest  join problem on problem.pid= problem_contest.pid where cid= ? order by level,orderp asc limit 50 offset ?
contest.style.enabled=select sid,style_name as name from contest_style where enabled= true
contest.style.enabled.id=select sid,style_name as name from contest_style join contest on contest_style.sid = contest.style where contest.cid=?
count.announcement.pattern=select count(*) from announcements where content ilike ?
count.announcement=select count(*) from announcements
count.available.courses.filter=select count(*) from course where enabled = true
count.before.submissions.contest=SELECT count(submit_id) from contest_submition where uid= ? and pid= ? and cid= ? and submit_id < ?
count.best.solutions=select count(*) from (select * from (select distinct on (username) submit_id,username,language,time,memory,fontsize,date from submition where status = 'Accepted' and pid = ? and submition.enabled = true and submition.lock = false group by username,time,memory,date,language,fontsize,submit_id having (time = min(time) and memory = min(memory) and date= min(date)) or (time = min(time) and memory = min(memory)) or (time = min(time))) as tbl order by time,memory,date) as t
count.coming.contests=select count(*) from contest where initdate > now() and enabled= true
count.contest.general.scoreboard.pattern=select count(*) from (select count(*) from user_contest join users on users.uid= user_contest.uid join user_stats_contest on (user_contest.uid= user_stats_contest.uid and user_contest.cid= user_stats_contest.cid) join country using(country_id) join institution using(inst_id) where username ilike ? group by users.uid) as query
count.contest.general.scoreboard=select count(*) from (select count(*) from user_contest join users on users.uid= user_contest.uid join user_stats_contest on (user_contest.uid= user_stats_contest.uid and user_contest.cid= user_stats_contest.cid) join country using(country_id) join institution using(inst_id) group by users.uid) as query
count.contest.public.clarification=SELECT count(*) from clarification where id_contest= ? and publicclarification= true
count.contest=select count(*) from contest
count.countries.pattern=select count(*) from country where (name ilike ? or zip ilike ?)
count.countries=select count(*) from country
count.enabled.countries.pattern=SELECT COUNT(*) FROM country WHERE country.enabled= TRUE AND country_id IN (SELECT country_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) AND (country.name ILIKE ? OR country.zip ILIKE ?)
count.enabled.countries=SELECT COUNT(*) FROM country WHERE country.enabled= TRUE AND country_id IN (SELECT country_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)
count.enabled.inst.by.country.pattern=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) AND (institution.name ILIKE ? OR institution.zip ILIKE ?) and institution.country_id= ?
count.enabled.inst.by.country=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)  and institution.country_id= ?
count.enabled.inst.pattern=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) AND (institution.name ILIKE ? OR institution.zip ILIKE ?)
count.enabled.inst=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)
count.enabled.users.1=and online= true
count.enabled.users.2=and (username ilike ? or nick ilike ?)
count.enabled.users.bycountry.1=and online= true
count.enabled.users.bycountry.2=and (username ilike ? or nick ilike ?)
count.enabled.users.bycountry=select count(*) from user_profile join users on user_profile.uid= users.uid where enabled= true and country_id= ?
count.enabled.users=select count(*) from user_profile join users on user_profile.uid= users.uid where enabled= true
count.enabled.users.scoreboard=select count(*) from user_profile join users on user_profile.uid= users.uid join country on country.country_id = users.country_id join user_stats on user_stats.uid = users.uid join institution on institution.inst_id = users.inst_id where users.enabled= true
count.free.contest.ranking=SELECT count(*) from user_contest join users on user_contest.uid= users.uid join country on public.users.country_id=country.country_id join institution on public.users.inst_id= institution.inst_id join user_stats_contest on user_stats_contest.uid= public.users.uid where users.enabled= true and user_contest.cid= ? and user_stats_contest.cid= ?
count.general.clarification=SELECT count(*) from clarification where general= true and id_contest= ? and id_clarification not in (SELECT clarification.id_clarification from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where teamfor= ?)
count.general.contest.clarification=SELECT count(*) from clarification where general= true and id_contest= ? and id_clarification not in (SELECT clarification.id_clarification from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where teamfor= ?)
count.inst.country=select count(*) from institution where country_id= ?
count.inst.enabled.country.pattern=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) AND (institution.name ILIKE ? OR institution.zip ILIKE ?) and institution.country_id= ?
count.inst.enabled.country=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) and institution.country_id= ? 
count.inst.enabled.pattern=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)  AND (institution.name ILIKE ? OR institution.zip ILIKE ?)
count.inst.enabled=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)
count.get.all.inst.1=select count(*) from institution where name ilike ? or zip ilike ?
count.get.all.inst.2.country=select count(*) from institution where country_id= ?
count.get.all.inst.2.enabled.country.pattern=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) AND (institution.name ILIKE ? OR institution.zip ILIKE ?) and institution.country_id= ?
count.get.all.inst.2.enabled.country=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true) and institution.country_id= ? 
count.get.all.inst.2.enabled.pattern=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)  AND (institution.name ILIKE ? OR institution.zip ILIKE ?)
count.get.all.inst.2.enabled=SELECT COUNT(*) FROM institution WHERE institution.enabled= TRUE AND inst_id != -1 AND inst_id IN (SELECT inst_id FROM users JOIN user_profile USING (uid) WHERE enabled= true)
count.get.all.inst.2=select count(*) from institution
count.institutions=select count(*) from (select inst_id from users join user_profile using (uid) join institution using (inst_id) where users.country_id= ? and users.enabled= true and institution.enabled= true and inst_id != -1 group by inst_id) as query
count.judge.clarification=SELECT count(*) from clarification join admin_clarification on clarification.id_clarification= admin_clarification.id_clarification where id_contest= ?
count.judges.clarification=SELECT count(*) from clarification join admin_clarification on clarification.id_clarification= admin_clarification.id_clarification where id_contest= ?
count.judges.unreply.clarifications=SELECT count(*) from clarification where id_contest= ? and reply= false and request= true
count.load.logs.pattern=select count(*) from admin_log where log ilike ?
count.load.logs=select count(*) from admin_log
count.logged.users.bycountry=select count(*) from users where enabled= true and online= true and country_id= ?
count.logged.users.byinstitution=select count(*) from users where enabled= true and online= true and inst_id= ?
count.logged.users=select count(*) from users where enabled= true and online= true
count.my.clarification=SELECT count(*) from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where id_contest= ? and teamfor= ? and clarification.id_clarification not in (SELECT clarification.id_clarification from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where teamfor != ? and general= true)
count.news.enabled=select count(*) from news where enabled= TRUE
count.news.pattern=select count(*) from news where title ilike ? or overview ilike ?
count.news=select count(*) from news
count.past.contests=select count(*) from contest where now()> enddate and enabled= true
count.past.contests.pattern=select count(*) from contest where now()> enddate and enabled= true and (name ilike ? or cid::character varying ilike ?)
count.prob.cont=select count(*) from problem_contest where cid= ?
contest.groups=select groupd from user_contest uc where virtual=false and cid = ? group by groupd
contest.problem.order=select max(orderp) from problem_contest where cid=?
count.pending.balloons=select count(*) OVER () from contest_submition cs join user_contest uc on cs.uid = uc.uid and cs.cid = uc.cid join problem_contest pc on cs.pid = pc.pid and cs.cid = pc.cid join users u on u.uid = cs.uid where cs.balloon_notification=false and cs.cid=? and cs.virtual=false and cs.enabled=true and cs.status='Accepted' and cs.date < (select enddate - (interval '1 min'*frtime) from contest where cid = ?) group by u.username,cs.pid limit 1
count.pending.balloons.grouped=select count(*) OVER () from contest_submition cs join user_contest uc on cs.uid = uc.uid and cs.cid = uc.cid join problem_contest pc on cs.pid = pc.pid and cs.cid = pc.cid join users u on u.uid = cs.uid where cs.balloon_notification=false and cs.cid=? and cs.virtual=false and cs.enabled=true and cs.status='Accepted' and groupd=? and cs.date < (select enddate - (interval '1 min'*frtime) from contest where cid = ?) group by u.username,cs.pid limit 1
count.problem.admin=select count(*) from problem p join psetter_problem pp on p.pid = pp.problem_id where pp.user_id = ? and (p.title ilike ? or p.pid = ?)
count.problem.admin.all=select count(*) from problem where (problem.title ilike ? or problem.pid = ?)
count.problem=select count(*) from problem p join psetter_problem pp on p.pid = pp.problem_id where pp.user_id = ?
count.problem.all=select count(*) from problem
count.problems.10=and pid in (select problem_id from user_problem_favorite where user_id= (select uid from users where username= ?))
count.problems.1=select count(*) from problem where enable= TRUE and disable_24h= false and (problem.title ilike ? or problem.description ilike ? or problem.title_es ilike ? or problem.description_es ilike ? or problem.title_pt ilike ? or problem.description_pt ilike ? or problem.pid = ?)
count.problems.2=and pid in (select problem_id from user_problem where accepted=true and user_id= (select uid from users where username= ?)) 
count.problems.3=and pid in (SELECT pid from submition where username= ? and status != 'Accepted' group by pid having pid not in (SELECT problem_id from user_problem where accepted=true and user_id= (select uid from users where username= ?)))
count.problems.4=and pid not in (SELECT pid from submition where username= ?)
count.problems.5=and pid in (select problem_id from user_problem_favorite where user_id= (select uid from users where username= ?))
count.problems.6=select count(*) from problem where enable= TRUE and disable_24h= false
count.problems.7=and pid in (select problem_id from user_problem where accepted=true and user_id= (select uid from users where username= ?))
count.problems.8=and pid in (SELECT pid from submition where username= ? and status != 'Accepted' group by pid having pid not in (SELECT problem_id from user_problem where accepted=true and user_id= (select uid from users where username= ?)))
count.problems.9=and pid not in (SELECT pid from submition where username= ?)
count.problems.11=and pid in (SELECT pid FROM problem_classification WHERE true
count.problems.12=SELECT count(*) FROM problem WHERE pid NOT IN (SELECT DISTINCT pid FROM problem_classification)
count.problems.13=SELECT problem.pid,(select username from users where uid = problem.uid) as username,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp FROM problem JOIN problem_stats ON problem_stats.pid= problem.pid WHERE enable= TRUE AND disable_24h= FALSE AND problem.pid NOT IN (SELECT DISTINCT pid FROM problem_classification) ORDER BY problem.pid
count.public.clarification=SELECT count(*) from clarification where id_contest= ? and publicclarification= true
count.running.contests=select count(*) from contest where now() between initdate and enddate and enabled= true
count.teams.admin.pattern=select count(*) from team_profile join users using(uid) where username ilike ? or nick ilike ?
count.teams.admin=select count(*) from team_profile join users using(uid)
count.user.clarification=SELECT count(*) from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where id_contest= ? and teamfor= ? and clarification.id_clarification not in (SELECT clarification.id_clarification from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where teamfor != ? and general= true)

count.user.draft=SELECT count(*) from draft where username= ?
count.user.unread.clarifications=SELECT count(*) from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where id_contest= ? and teamfor= ? and user_clarification.read= false
count.users.admin.pattern=select count(*) from user_profile join users using(uid) where username ilike ? or nick ilike ? or email ilike ?
count.users.admin=select count(*) from user_profile join users using(uid)
count.users.vcont=select count(*) from contest where uid= ? and virtual=true
count.users.virtual.contest=select count(*) from individual_virtual_contest join contest on contest.cid= individual_virtual_contest.cid where username= ?
count.users=select count(*) from users join user_profile using (uid) where users.country_id= ? and users.enabled= true 
count.load.vcont.2=select count(*) from individual_virtual_contest                     
count.virtual.contest=select count(*) from individual_virtual_contest                     
count.virtual.contest.problems=select count(*) from problem_contest where cid = ?
country.by.id.enabled=select zip,name,country_id as id,zip_two,website,enabled from country where country_id= ?
country.by.id=select zip,name,country_id as id,zip_two,website from country where country_id= ?
country.rank=select rank from (SELECT country_id,row_number()  over (order by tpoints desc,acc desc) as rank from (select sum(points) as tpoints,sum(ac) as acc, users.country_id from users join country on country.country_id= users.country_id join user_profile USING(uid) join user_stats USING(uid) where users.enabled= true group by users.country_id) as query) as ranking where country_id= ?
course.created.by=select exists(select course_id from course where username = ? and course_id = ?)
course.last.logs=SELECT clid as id, username, message as "log" from course_logs  where course_id = ? order by clid desc limit 5
course.last.logs.1=SELECT clid as id, username, message as "log" from course_logs  where course_id = ? and clid > ? order by clid desc limit 5
disabled.24h.pid=select disable_24h from problem where pid= ?
email.exist.update=select exists(select email from public.users join user_profile on users.uid= user_profile.uid where email= ? and username != ?)
email.changed=select exists(select email from user_profile where email != ? and uid = ?)
email.exist=select exists(select email from user_profile where email= ?)
exist.bt.contest=select exists(select uid from balloontrackers where uid=? and cid=?)
enable.user=UPDATE users SET enabled= ? where username= ?
enabled.by.pid=select enable from problem where pid= ?
enabled.countries=select country_id as id,name from country where country.enabled= true
enabled.country.by.id=select country_id as id,name,zip,enabled from country where country_id= ?
enabled.language.by.problem.1=select lid,language, name_bin, descripcion,key from language where enabled= true and language.lid in (select lid from problem join problem_language using (pid) where pid= ?) order by language
enabled.language.by.problem=select lid,language, name_bin, descripcion,key from language where enabled= true order by language
enabled.language.pid=select lid,language, name_bin, descripcion,key from language where enabled= true  and language.lid in (select lid from problem join problem_language using (pid) where pid= ?) order by language
enabled.languages=select lid,language, name_bin, descripcion,key from language where enabled= true order by language
enabled.locale=select lid,description from locale order by lid
enabled.news.list=select nid,title,overview,username,date from news where enabled= TRUE order by rate desc,date desc limit 5 offset ?
enabled.programming.language=select lid,language, name_bin, descripcion,key,ext from language where enabled= true ORDER BY priority DESC
enabled.icpc.language=select lid,language, name_bin, descripcion,key,ext from language where key in ('java','gcc','cpp','cpp11') and enabled= true order by language
exist.dataset=select exists(select id from datasets where problem_id=?)
exist.chapter.course=select exists(select chapter_id from chapter where course_id = ? and chapter_number = ?)
exist.contest.name=select exists(select name from contest where name= ? and cid != ?)
exist.contest=select exists(select cid from contest where cid= ?)
exist.country.name=select exists(select name from country where name= ?)
exist.country.zip=select exists(select zip from country where zip= ?)
exist.inst.name.but=select exists(select institution.name from institution where institution.name ilike ? and inst_id != ?)
exist.inst.name.by.country=select exists(select country_id from institution where name= ? and country_id= ?)
exist.inst.name.country=select exists(select country_id from institution where name= ? and country_id= ?)
exist.inst.name=select exists(select institution.name from institution where institution.name ilike ?)
exist.inst.zip.but=select exists(select institution.zip from institution where institution.zip ilike ? and inst_id != ?)
exist.inst.zip=select exists(select zip from institution where zip= ?)
exist.institution.name.but=select exists(select institution.name from institution where institution.name ilike ? and inst_id != ?)
exist.institution.name.country=select exists(select country_id from institution where name= ? and country_id= ?)
exist.institution.zip.but=select exists(select institution.zip from institution where institution.zip ilike ? and inst_id != ?)
exist.institution.zip=select exists(select zip from institution where zip= ?)
exist.judge.contest=select exists(select id_admin from contest_judges where id_admin= ? and cid= ?)
exist.problem=select exists(select pid from problem where pid= ?)
exist.problem.by.title=select exists(select title from problem where title= ?)
exist.problem.bypid=select exists(select pid from problem where pid= ?)
exist.problem.in.contest=select exists(select pid from problem_contest join problem p using (pid) where p.pid= ? and cid= ? and level <= ?)
exist.problem.in.vcontest=select exists(select cs.pid from problem_contest cs join problem using(pid) where cs.pid = ?)
exist.team.clarification=select exists(select teamfor from user_clarification where id_clarification= ?)
exist.user.by.mail.off.uid=select exists(select email from user_profile where email= ? and uid != ?)
exist.user.bymail=select exists(select email from user_profile where email= ?)
exist.user.in.contest=select exists(select uid from user_contest where cid= ? and uid= ?)
exists.team.clarification=select exists(select teamfor from user_clarification where id_clarification= ?)
exists.user.byusername=select exists(select username from users where username= ?)
find.all.problems.1=and problem.pid in (select problem_id from user_problem where accepted=true and user_id= ?)
find.all.problems.2=and problem.pid in (SELECT pid from submition where username= ? and status != 'Accepted' group by pid having pid not in (SELECT problem_id from user_problem where accepted=true and user_id= ?))
find.all.problems.3=and problem.pid not in (SELECT pid from submition where username= ?)
find.all.problems.4=and problem.pid in (select problem_id from user_problem_favorite where user_id= ?)
find.all.problems.5=AND problem.pid NOT IN (SELECT DISTINCT pid FROM problem_classification)
find.all.problems.no.pattern=SELECT problem.pid,(select username from users where uid = problem.uid) as username,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp FROM problem JOIN problem_stats ON problem_stats.pid= problem.pid WHERE enable= TRUE AND disable_24h= FALSE <and> <orderby> LIMIT 50 OFFSET ?
find.all.problems=SELECT problem.pid,(select username from users where uid = problem.uid) as username,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp FROM problem JOIN problem_stats ON problem_stats.pid= problem.pid WHERE enable= TRUE AND disable_24h= FALSE AND (problem.title ilike ? or problem.description ilike ? or problem.title_es ilike ? or problem.description_es ilike ? or problem.title_pt ilike ? or problem.description_pt ilike ? or problem.pid = ?) <and> <orderby> LIMIT 50 OFFSET ?
find.announcement=select date,enabled,content,contest_id as contest from announcements where aid= ?
select.all.announcements=SELECT * from announcements
find.vcont.user=SELECT cid from individual_virtual_contest  where username= ?
find.virtual.contest.user=SELECT cid from individual_virtual_contest  where username= ?
get.accu=select count(*) from submition where status= 'Accepted' and pid= ? and enabled= true
get.all.inst.1=select institution.zip,institution.name,institution.enabled,inst_id as id,country.zip as czip,country.name as cname from institution join country on institution.country_id= country.country_id where institution.name ilike ? or institution.zip ilike ? limit 30 offset ?
get.all.inst.2=select institution.zip,institution.name,institution.enabled,inst_id as id,country.zip as czip,country.name as cname from institution join country on institution.country_id= country.country_id limit 30 offset ?
get.all.languages=select lid,language, name_bin, descripcion,key,enabled from language order by language
get.available.courses.filter=select course_id, course_name as name, course_type as type, enabled, is_public as ispublic, username, initdate,initdate > now() as coming, initdate < now() as running, (select count(*) from course_users where course_id = course.course_id) as total_users from course where enabled = true
get.average.dictums=SELECT COALESCE( AVG(dictum), 0.0 ) FROM plagicoj_detector_result WHERE id_source_submission IN (SELECT submit_id FROM submition WHERE uid= ?) AND id_destination_submission IN (SELECT submit_id FROM submition WHERE uid= ?)
get.clarification=select distinct user_clarification.id_clarification as id,pid,date,username,title,text as description,publicclarification as publics,general as forall,read as isread,case when clarification.pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle from clarification join users on users.uid= clarification.id_team join user_clarification on clarification.id_clarification= user_clarification.id_clarification where user_clarification.id_clarification= ? and id_contest= ? and teamfor= ?
get.chapter.by.contentid=SELECT chapter_number from chapter join chapter_content using(chapter_id) where content_id = ?
get.error=select error from source where sid= ?
get.content.address=select content_address from chapter_content where content_id = ?
get.contest.compile.info=select error as compile_info,contest_submition.date > (select contest.enddate - contest.deadtime * interval '1 minutes' from contest where cid= ?) as isfrozen from contest_source join contest_submition on contest_submition.submit_id= contest_source.sid where sid= ?
get.contest.guestgroup=select guest_group from contest where cid = ?
get.contest.source.code.admin=select submit_id as sid,language as lang,pid,code,contest_submition.date, status,contest_submition.time as time_used,min_case as avg_time_used,testcase,contest_submition.username,contest_submition.memory as memory_used,contest_submition.fontsize as font,contest_submition.date > (select contest.enddate - contest.deadtime * interval '1 minutes' from contest where cid= ?) as frozen, pid as ProblemTitle from contest_submition join contest_source on contest_source.sid= contest_submition.submit_id where submit_id= ? and contest_submition.cid= ?
get.contest.source.code=select submit_id as sid,pid,language as lang,code,contest_submition.date, status,contest_submition.time as time_used,min_case as avg_time_used,testcase,contest_submition.username,contest_submition.memory as memory_used,contest_submition.fontsize as font,contest_submition.date > (select contest.enddate - contest.deadtime * interval '1 minutes' from contest where cid= ?) as frozen, pid as ProblemTitle from contest_submition join contest_source on contest_source.sid= contest_submition.submit_id where submit_id= ? and contest_submition.cid= ? and contest_submition.username= ?
get.contest.forsaris=SELECT name,enddate < now() as past, cast((Extract (epoch from enddate-initdate)/60 - frtime) as integer) as from_start from contest where cid = ?
get.contest.users.forsaris=select nick from user_contest  join users using(uid) join contest using(cid) where cid = ? and contest.virtual = false and (contest.guest_group is null or user_contest.groupd <> contest.guest_group)
get.contest.users.forsaris.group=select nick from user_contest  join users using(uid) where cid = ? and virtual = false and groupd = ?
get.contest.runs.forsaris=select nick,pid,cast(trunc(Extract (epoch from contest_submition.date - initdate)/60) as integer) as from_start,case when contest_submition.status = 'Accepted' then true else false end as success from contest_submition join contest using(cid) join users using(username) where cid = ? and contest.virtual = false and contest_submition.enabled = true and users.uid in (select uid from user_contest where cid = ? and (contest.guest_group is null or user_contest.groupd <> contest.guest_group)) order by from_start asc
get.contest.runs.forsaris.group=select nick,pid,cast(trunc(Extract (epoch from contest_submition.date - initdate)/60) as integer) as from_start,case when contest_submition.status = 'Accepted' then true else false end as success from contest_submition join contest using(cid) join users using(username) where contest.cid = ? and contest_submition.virtual = false and contest_submition.enabled = true and users.uid in (select uid from user_contest where cid = ? and groupd = ?) order by from_start asc
countries.pattern=select zip,name,enabled,country_id as id from country where (name ilike ? or zip ilike ?) LIMIT 30 OFFSET ?
countries=select zip,name,enabled,country_id as id from country LIMIT 30 OFFSET ?
get.course=select course_id, course_name as name, course_type as "type", enabled, is_public as ispublic, username, initdate, chapter, course_overview as overview, problem_points, score_active from course where course_id = ?
get.default.prog.lang=select lid from users where username= ?
get.draft.mail=select draft_id as idmail,date,'' as to,title,content from draft where draft_id= ? and username= ?
#get.draft.mail=select draft_id as idmail,date,to as usernameTo,title,content from draft where draft_id= ? and username= ?
get.enabled.inst.by.country=select inst_id as id,name from institution where institution.enabled= true and country_id= ? order by name
get.enabled.inst=select inst_id as id,name from institution where institution.enabled= true
get.enabled.languages=SELECT language,key,descripcion FROM language WHERE language.enabled= true ORDER BY language
free.contest.ranking=SELECT country.zip as country,country.name as country_desc,institution.zip as Institution,institution.name as Institution_desc,username,nick,(ac+rte+ce+wa+mle+tle+ole+pe) as total,user_contest.accepted as acc, accepted as accu,trunc(user_contest.points::numeric,2) as points,current_level as level, case when (ac+rte+ce+wa+mle+tle+ole+pe) > 0 then (cast(accepted as double precision)/(ac+rte+ce+wa+mle+tle+ole+pe))*100 else 0 end as percent,online from user_contest join users on user_contest.uid= users.uid join country on public.users.country_id=country.country_id join institution on public.users.inst_id= institution.inst_id join user_stats_contest on user_stats_contest.uid= public.users.uid where users.enabled= true and user_contest.cid= ? and user_stats_contest.cid= ? order by points desc,user_contest.accepted desc,lastacc asc limit 30 offset ?
get.global.rankin.acm.cids=SELECT user_contest.uid,username,nick,accepted,penalty,lastacc,country.name,country.zip,institution.name,institution.zip,user_contest.A_time,user_contest.A_beforeac,user_contest.A_afterac,user_contest.B_time,user_contest.B_beforeac,user_contest.B_afterac,user_contest.C_time,user_contest.C_beforeac,user_contest.C_afterac,user_contest.D_time,user_contest.D_beforeac,user_contest.D_afterac,E_time,user_contest.E_beforeac,user_contest.E_afterac,user_contest.F_time,user_contest.F_beforeac,user_contest.F_afterac,user_contest.G_time,user_contest.G_beforeac,user_contest.G_afterac,user_contest.H_time,user_contest.H_beforeac,user_contest.H_afterac,user_contest.I_time,user_contest.I_beforeac,user_contest.I_afterac,user_contest.J_time,J_beforeac,user_contest.J_afterac,user_contest.K_time,user_contest.K_beforeac,user_contest.K_afterac,user_contest.L_time,user_contest.L_beforeac,user_contest.L_afterac,a_pending,b_pending,c_pending,d_pending,e_pending,f_pending,g_pending,h_pending,i_pending,j_pending,k_pending,l_pending,user_contest.groupd,online from user_contest inner join public.users on public.users.uid= user_contest.uid join country on users.country_id= country.country_id join institution on users.inst_id= institution.inst_id where cid in (<cids>) and virtual= false order by (accepted) desc, penalty asc, lastacc asc
get.global.rankin.acm=SELECT user_contest.uid,username,nick,accepted,penalty,lastacc,country.name,country.zip,institution.name,institution.zip,user_contest.A_time,user_contest.A_beforeac,user_contest.A_afterac,user_contest.B_time,user_contest.B_beforeac,user_contest.B_afterac,user_contest.C_time,user_contest.C_beforeac,user_contest.C_afterac,user_contest.D_time,user_contest.D_beforeac,user_contest.D_afterac,E_time,user_contest.E_beforeac,user_contest.E_afterac,user_contest.F_time,user_contest.F_beforeac,user_contest.F_afterac,user_contest.G_time,user_contest.G_beforeac,user_contest.G_afterac,user_contest.H_time,user_contest.H_beforeac,user_contest.H_afterac,user_contest.I_time,user_contest.I_beforeac,user_contest.I_afterac,user_contest.J_time,J_beforeac,user_contest.J_afterac,user_contest.K_time,user_contest.K_beforeac,user_contest.K_afterac,user_contest.L_time,user_contest.L_beforeac,user_contest.L_afterac,a_pending,b_pending,c_pending,d_pending,e_pending,f_pending,g_pending,h_pending,i_pending,j_pending,k_pending,l_pending,user_contest.groupd,online from user_contest inner join public.users on public.users.uid= user_contest.uid join country on users.country_id= country.country_id join institution on users.inst_id= institution.inst_id where virtual= false order by (accepted) desc, penalty asc, lastacc asc
get.groups=select description as name from public.group order by description
get.inst.name=select name from institution where inst_id= ?
get.last.course.byuser=select max(course_id) from course where username = ?
get.lid.by.key=select lid from language where key = ?
get.mail.flag.status=select enabled_mail from global_flags
get.max.submit.id.by.user.pcode.contest=select max(submit_id) from contest_submition where username= ? and pid= ?
get.max.submit.id.by.user.pcode=select max(submit_id) from submition where username= ? and pid= ?
get.pinfo.byuser=select view_problem_info from user_profile join users using(uid) where username = ?
get.plagicoj.detector.matches=SELECT id_source_submission, id_destination_submission, detector_type, source_index, destination_index, length, id_plagicoj_detector_match FROM plagicoj_detector_match WHERE id_source_submission= ? AND id_destination_submission= ? AND detector_type= ? 
get.plagicoj.detector.res.judge.rev=SELECT id_plagicoj_result_judge_revision, id_source_submission, id_destination_submission, id_user, comment, evaluation, date FROM plagicoj_result_judge_revision WHERE id_source_submission= ? AND id_destination_submission= ? AND detector_type= ? order by date desc
get.plagicoj.detector.result=SELECT id_source_submission,  id_destination_submission,  detector_type, dictum FROM plagicoj_detector_result WHERE plagicoj_detector_result.id_source_submission= ? AND plagicoj_detector_result.id_destination_submission= ? AND plagicoj_detector_result.detector_type= ? 
get.plagicoj.detector.results=SELECT id_source_submission, id_destination_submission, detector_type, dictum FROM plagicoj_detector_result WHERE id_source_submission= ? AND id_destination_submission= ? 
get.plagicoj.history=SELECT id_source_submission as sourcesubmissionid, id_destination_submission as destinationsubmissionid, dictum FROM plagicoj_result WHERE id_source_submission NOT IN (SELECT submit_id FROM submition WHERE uid= ? ) AND id_destination_submission in (SELECT submit_id FROM submition WHERE uid= ? ) ORDER BY dictum DESC LIMIT 20
get.plagicoj.result=SELECT dictum FROM plagicoj_result WHERE id_source_submission= ? AND id_destination_submission= ?
get.plagicoj.submission=SELECT submition.uid,username,submition.pid,submition.pid,submit_id as submitid,submition.time as timen,submition.memory,submition.fontsize as font,submition.date,status,language,code,testcase,average_case as average FROM submition join source on source.sid= submition.submit_id WHERE submit_id= ? AND submition.enabled= true ORDER BY (submit_id)
get.plagicoj.user.profile=SELECT id_plagicoj_user_profile as userid,cant_dictums as cantdictums, sum_dictums as sumdictums FROM plagicoj_user_profile WHERE id_plagicoj_user_profile= ? 
get.problem.tried.in.contest=SELECT pid from contest_submition where status != 'Accepted' and contest_submition.uid= ? and contest_submition.cid= ? and enabled= true and pid not in (SELECT pid from contest_submition where status= 'Accepted' and contest_submition.uid= ? and contest_submition.cid= ? and enabled= true ) group by pid
get.problems.tryied.uid=SELECT problem.pid,problem.title from problem join user_problem on problem.pid = user_problem.problem_id where accepted = false and user_id=?
get.problems.tryied=SELECT pid from submition where status != 'Accepted' and submition.username= ? and enabled= true and pid not in (SELECT pid from submition where status= 'Accepted' and submition.username= ? and enabled= true ) group by pid order by pid
get.programming.language.by.username=select lid,key from users join language using(lid) where username= ?
get.public.clarification=select distinct id_clarification as id,pid,date,username,title,text as description,publicclarification as publics,general as forall,case when pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle  from clarification join users on users.uid= clarification.id_team where id_clarification= ? and id_contest= ? and publicclarification= true
get.ranking.acm.virtual=SELECT user_contest.uid,username,nick,accepted,penalty,lastacc,country.name,country.zip,institution.name,institution.zip,user_contest.virtual from user_contest inner join public.users on public.users.uid= user_contest.uid join country on users.country_id= country.country_id join institution on users.inst_id= institution.inst_id where cid= (select cid from individual_virtual_contest where vid=?) and ((virtual= false and username != ?) or (virtual= true and (username= ? or username in (select username from virtual_contest_guest where vid= (select father from individual_virtual_contest where username= ?))))) order by (accepted) desc, penalty asc, lastacc asc
get.source.code=select submit_id as sid,submition.language as lang,code,submition.date, status,submition.time as time_used,max_case as max_time_used,min_case as min_time_used,average_case as avg_time_used,testcase,submition.username,submition.memory as memory_used,submition.fontsize as font,pid,submition.uid,language.lid,language.key,submition.ac_cases as ac_test_cases from submition join source on source.sid= submition.submit_id join language on language.language= submition.language where submit_id= ?
get.source.code.username=select submit_id,submition.language as lang,code,code as even,submition.date, status,submition.time,max_case,min_case,average_case as average,testcase,submition.username,submition.memory,submition.fontsize as font,pid,submition.uid,language.lid,language.key from submition join source on source.sid= submition.submit_id join language on language.language= submition.language where submition.username= ?
get.source.code.ac.username=select submit_id,submition.language as lang,code,code as even,submition.date, status,submition.time,max_case,min_case,average_case as average,testcase,submition.username,submition.memory,submition.fontsize as font,pid,submition.uid,language.lid,language.key from submition join source on source.sid= submition.submit_id join language on language.language= submition.language where submition.username= ? and status = 'Accepted'
get.user.authorities=select authority from authorities where username= ?
get.user.in.contest=select username from user_contest join users on users.uid= user_contest.uid where cid= ?
get.user.contest=select coach,user_1,user_2,user_3,username,nick,lang,institution.zip as Institution,country.zip as Country,country.name as Country_desc,institution.name as Institution_desc,user_contest.points,ac as acc,wa,rte,tle,mle,ce,fle,pe,ole,ivf, ac + wa + rte + tle + fle + ce + mle + pe + ole + ivf as total from public.users join institution on institution.inst_id= public.users.inst_id join country on country.country_id= public.users.country_id left join team_profile tp on public.users.uid = tp.uid join user_stats_contest on user_stats_contest.uid= public.users.uid join user_contest on user_contest.uid= public.users.uid where username= ? and user_contest.cid= ? and user_stats_contest.cid= ?
get.user.locale=select i18n from users join locale on (users.locale= locale.lid )  where username= ?
get.user.rule=select access_rule from users where username= ?
data.for.baylor.xml=select tp.icpc_baylor_id,uc.accepted,uc.penalty,greatest((case when a_time = 100000000 then 0 else a_time end), (case when b_time = 100000000 then 0 else b_time end), (case when c_time = 100000000 then 0 else c_time end), (case when d_time = 100000000 then 0 else d_time end), (case when e_time = 100000000 then 0 else e_time end), (case when f_time = 100000000 then 0 else f_time end), (case when g_time = 100000000 then 0 else g_time end), (case when h_time = 100000000 then 0 else h_time end), (case when i_time = 100000000 then 0 else i_time end), (case when j_time = 100000000 then 0 else j_time end), (case when k_time = 100000000 then 0 else k_time end), (case when l_time = 100000000 then 0 else l_time end))/60000 as last_time from user_contest uc join users u using(uid) join team_profile tp using(uid)join contest c using(cid) where c.virtual=false and uc.cid=? and uc.groupd <> c.guest_group order by accepted desc,penalty asc,last_time asc
get.users.in.course=select fullname || ' ' || lastname as name, username, uid, join_date, email, banned from users join user_profile using(uid) join course_users using(username) where course_id = ? order by username,uid
get.users.off.course=select username, uid from users join user_profile using(uid) where username not in (select username from course_users where course_id = ?) order by username,uid
get.problem.classifications=select id_classification,name,complexity from classifications  join problem_classification using (id_classification) where pid = ?
global.ranking.acm.minimum.cids=SELECT min(a_time),min(b_time),min(c_time),min(d_time),min(e_time),min(f_time),min(g_time),min(h_time),min(i_time),min(j_time),min(k_time),min(l_time) from user_contest where cid in (<cids>)
global.ranking.acm.minimum=SELECT min(a_time),min(b_time),min(c_time),min(d_time),min(e_time),min(f_time),min(g_time),min(h_time),min(i_time),min(j_time),min(k_time),min(l_time) from user_contest where <cids>
grant.user.authorities=insert into authorities (username,authority) values(?,?)
has.draft.out=select exists(select username from draft where username= ? )
insert.dataset=insert into datasets(problem_id,input,output) values (?,?,?)
insert.account.activation=insert into account_activation (username,user_key,registration) values(?,?,?)
insert.admin.clarification=insert into admin_clarification (id_clarification) values(?)
insert.chapter=insert into chapter (chapter_number, course_id, chapter_name, initdate) values(?,?,?,?)
insert.clarification.public=insert into clarification (id_contest,id_team,pid,title,text,publicclarification) values(?,?,?,?,?,?)
insert.clarification=insert into clarification (id_contest,id_team,pid,title,text,request) values(?,?,?,?,?,true)
insert.classification=INSERT INTO classifications (name, aid) VALUES (?, 33)
insert.classifications=INSERT INTO classifications (name) VALUES (?)
insert.contest.judges=insert into contest_judges (cid,id_admin) values(?,?)
insert.contest.problem.stats=INSERT INTO problem_stats_contest (pid,cid) values (?,?)
insert.contest.problem=INSERT INTO problem_contest (pid,cid,level,orderp) values (?,?,?,?)
insert.contest.submission.1=INSERT INTO contest_source (sid,code) values(?,?)
insert.contest.submission=INSERT INTO contest_submition (uid,pid,fontsize,username,status,language,cid,virtual) VALUES(?,?,?,?,?,?,?,?)
insert.contest=insert into contest (cid,template,name) values(?,?,?)
insert.course=insert into course (course_name, course_type, username ) values(?,?,?)
insert.course.log=insert into course_logs (username, message, course_id) values(?,?,?)
insert.course.log.uid=insert into course_logs (username, message, course_id) values((select username from users where uid = ?),?,?)
insert.course.user=insert into course_users(username, course_id) values(?,?)
insert.draft=insert into draft (username,content,title,size) values(?,?,?,?)
#insert.draft=insert into draft (username,to,content,title,size) values(?,?,?,?,?)
insert.faq=insert into faq (answer,question) values (?,?)
insert.individual.vcont.father=insert into contest (cid,uid,initdate,template) values(?,?,?,?)
insert.individual.vcont=insert into contest (uid,name,initdate,enddate,template,private,virtual) values(?,?,?,?,?,?,true) returning cid
insert.individual.virtual.contest.father=insert into individual_virtual_contest (cid,username,start_time,father) values(?,?,?,?)
insert.individual.virtual.contest=insert into individual_virtual_contest (cid,username,start_time,is_public) values(?,?,?,?)
insert.institution=insert into institution (name,zip,country_id,website) values(?,?,?,?)
insert.language.contest=insert into language_contest values(?,?)
insert.language.stats.contest=insert into language_stats_contest (lid,cid) values (?,?)
insert.log=insert into admin_log (log,username) values(?,?)
insert.mail.2=update user_profile set consume_quote= consume_quote + ? where uid= (select uid from users where username= ?)
insert.material.chapter=INSERT into chapter_content  (chapter_id, content_type, content_address) values (?, 2, ?)
insert.plagicoj.detector.judge.rev= INSERT INTO plagicoj_result_judge_revision(id_source_submission,id_destination_submission,id_user,evaluation,comment,detector_type) VALUES(?,?,?,?,?,?)
insert.plagicoj.detector.match=INSERT INTO plagicoj_detector_match(id_source_submission, id_destination_submission, detector_type, source_index, destination_index, length) VALUES(?,?,?,?,?,?)
insert.plagicoj.detector.result=INSERT INTO plagicoj_detector_result(id_source_submission, id_destination_submission,detector_type,dictum) VALUES(?,?,?,?)
insert.plagicoj.result.judge.rev=INSERT INTO plagicoj_result_judge_revision(id_source_submission,id_destination_submission,id_user,evaluation,comment) VALUES(?,?,?,?,?)
insert.plagicoj.result=INSERT INTO plagicoj_result(id_source_submission,id_destination_submission,dictum) values(?, ?, ?)
insert.prob.lang=insert into problem_language (pid,lid) values(?,?)
insert.problem.limit=INSERT INTO problem_limits(problem_id,language_id,max_memory,max_case_execution_time,max_total_execution_time,max_source_code_lenght) VALUES(?,?,?,?,?,?)
insert.prob.stats=insert into problem_stats (pid) values(?)
insert.problem.color=update problem_contest set color=? where pid=? and cid=?
insert.problem.chapter=INSERT into chapter_content  (chapter_id, content_type, content_address) values (?, 1, ?)
insert.problem.classification=INSERT INTO problem_classification (pid,id_classification) VALUES (?,?)
insert.problem.classification.2=INSERT INTO problem_classification (pid,id_classification,complexity) VALUES (?,?,?)
insert.psetter.problem=insert into psetter_problem (user_id,problem_id) values (?,?)
insert.request.clarification=insert into clarification (id_contest,id_team,pid,title,text,request) values(?,?,?,?,?,true)
insert.submission.1=INSERT INTO source (sid,code) values(?,?)
insert.submission=INSERT INTO submition (uid,pid,fontsize,username,status,language,lock) VALUES(?,?,?,?,?,?,?)
insert.team.1=insert into public.users (username,password,country_id,inst_id,nick,locale,update_nick,enabled) values(?,?,?,?,?,?,?,?)
insert.team.2=insert into team_profile (uid) values(?)
insert.user.1=insert into user_profile (uid,email,fullname,lastname,dob,show_dob) values(?,?,?,?,'<dob>',?)
insert.user.2=INSERT into user_stats  (uid) VALUES (?)
insert.user.3=insert into authorities (username,authority) values (?,?)
insert.user.clarification.read=insert into user_clarification (id_clarification,teamfor,read) values(?,?,false)
insert.user.clarification=insert into user_clarification (id_clarification,teamfor) values(?,?)
insert.user.contest.1=INSERT INTO user_contest (uid,cid,groupd) values (?,?,?)
insert.balloontracker.contest=INSERT INTO balloontrackers (uid,cid) values (?,?)
clear.balloontracker.contest=delete from balloontrackers where cid=?
insert.user.contest=INSERT INTO user_contest (uid,cid,groupd) values (?,?,?)
insert.user.stats.contest=INSERT INTO user_stats_contest (uid,cid) values (?,?)
insert.user.private=INSERT INTO public.users (username,password,email,private_user,nick) values(?,?,?,?,?)
insert.user.x=insert into public.users (username,email,nick,fullname,lastname) values(?,?,?,?,?)
insert.user=insert into public.users (username,password,country_id,inst_id,nick,locale,lid,gender,contest_notifications,submition_notifications,newprivatemessage_notifications,wboard_notifications,problem_notifications,entries_notifications,show_email) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
insert.virtual.contest.guest.2=insert into virtual_contest_guest values(?,?)
insert.virtual.contest.guest=insert into virtual_contest_guest values((select vid from individual_virtual_contest where username= ?),?)
insert.virtual.contest.problem=insert into problem_contest(cid,pid) values(?,?)
insert.virtual.submission.1=INSERT INTO contest_submition (uid,pid,username,status,language,cid,virtual,date) VALUES(?,?,?,?,?,?,?,'<vstime>')
insert.virtual.submission=INSERT INTO contest_source (sid,code) values(?,?)
insert.contest.full=INSERT INTO contest(cid, name, initdate, enddate, private, total_users, style, deadtime, frtime, block, penalty, enabled, creation_time, rglimit, registration, ioimark, ppoints, unfreeze_time, contestant, gold, silver, bronze, virtual_template, levels, accepted_by_level, accepted_limit, repointing, guest_group, grouped, balloon, template, uid, virtual, enabled_submission, show_scoreboard, saris,show_stats,show_stats_out,show_status_out, allow_registration, unfreeze_auto, show_scoreboard_out, show_status, show_problem_out, show_ontest, enabled_mail, enabled_source_code_view, overview) VALUES (?,?,?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
insitutions.rank=select rank from (SELECT inst_id,row_number()  over (order by tpoints desc,acc desc) as rank from (select sum(points) as tpoints,sum(ac) as acc, inst_id from users join institution USING(inst_id) join country on country.country_id= users.country_id join user_profile USING(uid) join user_stats USING(uid) where institution.enabled= true and institution.inst_id != -1 and users.enabled= true group by inst_id) as query) as ranking where inst_id= ?
institution.id=select zip,name,enabled,inst_id as id,country_id,website from institution where inst_id= ?
institution.name=select name from institution where inst_id= ?
institution.profile.count.users=select count(*) from users join user_profile using(uid) where users.enabled= true and inst_id= ?
institution.rank.incountry=select rank from (SELECT inst_id,row_number()  over (order by tpoints desc,acc desc) as rank from (select sum(points) as tpoints,sum(ac) as acc, inst_id from users join institution USING(inst_id) join country on country.country_id= users.country_id join user_profile USING(uid) join user_stats USING(uid) where institution.enabled= true and institution.inst_id != -1 and users.enabled= true and users.country_id= ? group by inst_id) as query) as ranking where inst_id= ?
is.adved.enable=select enableadveditor from users where username= ?
is.course.public=select is_public from course where course_id = ?

is.first.sniper.ac.submit=select not exists (select * from submition where submit_id < ? and uid = ? and status = 'Accepted' and pid=? )
is.in.contest=SELECT exists(select uid from user_contest where cid= ? and uid= ?)
is.in=select exists(select username from public.users where username= ?)
is.judge.in.contest=select exists(select id_admin from contest_judges where id_admin= ? and cid= ?)
is.team=select exists(select authority from authorities join users on users.username= authorities.username where authorities.username= ? and authority= 'ROLE_TEAM')
is.update.nick.username=select update_nick from users where username = ?
is.user=select exists(select authority from authorities join users on users.username= authorities.username where authorities.username= ? and authority= 'ROLE_USER')
is.user.enabled=select enabled from users where username=?
is.user.in.course=select exists(select username from course_users where course_id = ? and username = ?)
issolved.byuser=select exists(select user_id from user_problem where accepted=true and user_id= ? and problem_id= ?)
issolved.byuserv=select exists(select user_id from user_problem where accepted=true and user_id= ? and problem_id= ?)
judge.in.contest=select username from contest_judges join users on users.uid= contest_judges.id_admin where cid= ?
language.exists=select exists(select language from language where key=?)
language.available=SELECT EXISTS (SELECT lid from problem join problem_language language using (pid)  where pid= ? and lid= ?)
list.faq=select * from faq order by id
load.access.rules=select rid, rule from global_access_rules
load.admin.courses=select course_id, course_name as name, course_type as type, enabled, is_public as ispublic, username, initdate,initdate > now() as coming, initdate < now() as running,enabled, (select count(*) from course_users where course_id = course.course_id) as total_users from course where username = ?
load.all.team.data=select uid,access_rule,'ROLE_TEAM',enabled,enableadveditor,username,nick,update_nick,tags, users.country_id,users.inst_id as Institution_id,lid,locale,coach,user_1,user_2,user_3 from  public.users join team_profile using(uid)  where username= ?
load.all.user.data=select u.uid,enableadveditor,email,mail_quote,access_rule,enabled,username,nick,update_nick,fullname as name,lastname,u.country_id,u.inst_id as Institution_id,gender,lid,show_email,locale,show_email,show_dob,Extract ('year' from dob) as year,Extract ('month' from dob) as month,Extract ('day' from dob) as day, view_problem_info,problem_notifications, contest_notifications,entries_notifications, submition_notifications as submissionNotifications,newprivatemessage_notifications as newprivatemessageNotifications, wboard_notifications as wboardNotifications from  public.users u join user_profile on u.uid= user_profile.uid where username= ?
announcement.pattern=select aid,date,enabled,content,contest_id as contest from announcements where content ilike ? limit 30 offset ?
announcement=select aid,date,enabled,content,contest_id as contest from announcements limit 30 offset ?
load.announcements=select content from announcements where enabled= true and contest_id= 0
load.authorities=select role as authority,rid from roles order by rid
load.chapter.info=select chapter_name as name, initdate from chapter where course_id = ? and chapter_number = ?
load.contest.2=select overview,uid,cid,balloon,gallery,saris,name,enabled,style,registration,frtime,deadtime,penalty,ioimark,ppoints,total_users,unfreeze_time,block as blocked,repointing,case when initdate > now() then initdate-now() else '0' end as tostart,gold,silver,bronze,accepted_by_level as acbylevels,accepted_limit as aclimit,enddate,initdate,rglimit,now() as now,show_stats,show_stats_out,show_status,show_scoreboard,allow_registration,unfreeze_auto,show_status_out,show_scoreboard_out,show_problem_out,show_ontest,contestant, now() - initdate  + interval '1 second' as elapsed, enddate - now()  as remaining,guest_group,grouped from contest where cid= ?
load.contest.announcements=select content from announcements where enabled= true and contest_id= ?
load.contest.full=select cid,balloon,gallery,saris,name,enabled,style,registration,frtime,deadtime,penalty,ioimark,ppoints,total_users,unfreeze_time,block,case when initdate > now() then initdate-now() else '0' end as tostart,gold,silver,bronze,accepted_by_level as acbylevels,accepted_limit as aclimit,levels,enddate,initdate,rglimit,now() as now,show_status,show_stats,show_scoreboard,allow_registration,unfreeze_auto,show_status_out,show_stats_out,show_scoreboard_out,show_problem_out,show_ontest,overview,contestant,virtual_template as vtemplate, extract('epoch' from (now()-initdate + interval '1 second')) as elapsed, extract('epoch' from (enddate - now())) as remaining,guest_group from contest where cid= ?
load.contest.global.scoreboard.pattern=select username,online,count(*) as contests,sum(accepted) as accu,sum(ac + wa + pe + ce + rte + ivf + mle + tle + ole + fle + uq) as  total,country.zip as country,country.name as country_desc,institution.zip as institution, institution.name as institution_desc from user_contest join users on users.uid= user_contest.uid join user_stats_contest on (user_contest.uid= user_stats_contest.uid and user_contest.cid= user_stats_contest.cid) join country using(country_id) join institution using(inst_id) where username ilike ? group by username,country.zip,country.name,institution.zip,institution.name,online order by <orderby>  limit 30 offset ?
load.contest.global.scoreboard=select username,online,count(*) as contests,sum(accepted) as accu,sum(ac + wa + pe + ce + rte + ivf + mle + tle + ole + fle + uq) as  total,country.zip as country,country.name as country_desc,institution.zip as institution, institution.name as institution_desc from user_contest join users on users.uid= user_contest.uid join user_stats_contest on (user_contest.uid= user_stats_contest.uid and user_contest.cid= user_stats_contest.cid) join country using(country_id) join institution using(inst_id)  group by username,country.zip,country.name,institution.zip,institution.name,online order by <orderby>  limit 30 offset ?
load.contest.global.settings=select cid,balloon,gallery,saris,name,enabled,style,registration,frtime,deadtime,penalty,ioimark,ppoints,total_users,unfreeze_time,gold,silver,bronze,levels,accepted_by_level as acbylevels,accepted_limit as aclimit,show_stats,show_status,show_scoreboard,allow_registration,unfreeze_auto,show_stats_out,show_status_out,show_scoreboard_out,show_problem_out,show_ontest,guest_group,grouped from contest where cid= ?
load.contest.judges=select contest_judges.id_admin as uid,username from contest_judges join users on users.uid= contest_judges.id_admin where cid= ?
load.contest.level=select levels from contest where cid= ?
load.contest.manage.users=select cid,name,enabled,style,registration,contestant,guest_group,grouped from contest where cid= ?
load.contest.manage=select cid,name,enabled,style,registration,contestant,virtual_template as vtemplate,block as blocked,enddate,initdate,rglimit,now() as now,guest_group,grouped from contest where cid= ?
load.contest.overview=select cid,overview from contest where cid= ?
load.contest.problem=select pid,title,title_es,title_pt,description,description_es,description_pt,input,input_es,input_pt,output,output_es,output_pt,comments,comments_es,comments_pt,input_example as inputex,output_example as outputex,problem.id_source,problem_source.name || ' - ' || problem_source.author as author,comments as comments,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata,level from problem join users on problem.uid = users.uid join problem_contest using (pid) join problem_source on problem_source.id_source = problem.id_source where enable = TRUE and pid = ? and problem_contest.cid = ?
load.contest.problems=select color as balloon_Color,problem.pid,pid || '-' || problem.title as title,level,release_date as rdate from problem join problem_contest using (pid) where cid= ? order by orderp asc
load.contest.stats=SELECT language, ac, wa, pe, tle, mle, fle, ole, ce, rte, uq, ivf, key from language join language_stats_contest on language.lid= language_stats_contest.lid where cid= ? order by language
load.contest.style=select style,levels,cid from contest where cid= ?
load.contest.submission.admin=SELECT uid,username,pid,submit_id,time,memory,fontsize as font,date,status,language,enabled,code from (contest_submition join contest_source on contest_source.sid= contest_submition.submit_id) where submit_id= ?
load.contest.user.data=select username,nick,institution.zip as Institution,country.zip as Country,country.name as Country_desc,institution.name as Institution_desc,locale.description as glanguage,language.language as Planguage, registration_date as Rgdate,coach,user_1,user_2,user_3 from  public.users join institution on institution.inst_id= public.users.inst_id join country on country.country_id= public.users.country_id join locale on locale.lid= users.locale join language on language.lid= users.lid join team_profile tp using (uid) where username= ?
load.contest.balloontrackers=select users.nick,users.uid,username from balloontrackers join users using (uid) where balloontrackers.cid=?
load.contest.users=select users.nick,user_contest.uid,username,groupd as group from user_contest join users using (uid) where cid= ? and virtual=false order by username,groupd
load.contest=select cid,name from contest where enddate > now()
load.contests.stats=select language,sum(ac) as ac, sum(wa) as wa, sum(pe) as pe, sum(tle) as tle, sum(mle) as mle, sum(fle) as fle, sum(ole) as ole, sum(ce) as ce, sum(rte) as rte, sum(uq) as uq, sum(ivf) as ivf from language join language_stats_contest on language.lid= language_stats_contest.lid group by language.lid,language order by language
load.contests=select cid,name,registration,enabled,initdate > now() as coming,now() between initdate and enddate as running,block as blocked, initdate, enddate from contest order by running desc,coming desc,enddate asc limit 50 offset ?
load.country.pattern=select zip,name,enabled,country_id as id from country where (name ilike ? or zip ilike ?) LIMIT 30 OFFSET ?
load.country=select zip,name,enabled,country_id as id from country LIMIT 30 OFFSET ?
load.datasets.did=select * from datasets where id=?
load.datasets.pid=select * from datasets where problem_id=?
load.some.datasets.pid=select * from datasets where problem_id=? order by id desc LIMIT ?

load.enabled.country.pattern=select country.zip,country.name,count(*) as users,sum(points) as points,sum(ac) as acc,users.country_id as id,(select count(*) from institution where country_id= users.country_id and inst_id in (select inst_id from users join user_profile using (uid) where enabled= true)) as Institutions from users join country on country.country_id= users.country_id join user_profile on users.uid= user_profile.uid join user_stats on user_profile.uid= user_stats.uid where country.enabled= true and users.enabled= true and (country.name ilike ? or country.zip ilike ?) group by country.zip,country.name,users.country_id ORDER BY <orderby> <orderbydir> limit 30 offset ?
load.enabled.country=select country.zip,country.name,count(*) as users,sum(points) as points,sum(ac) as acc,users.country_id as id,(select count(*) from institution where country_id= users.country_id and inst_id in (select inst_id from users join user_profile using (uid) where enabled= true)) as Institutions from users join country on country.country_id= users.country_id join user_profile on users.uid= user_profile.uid join user_stats on user_profile.uid= user_stats.uid where country.enabled= true and users.enabled= true group by country.zip,country.name,users.country_id ORDER BY <orderbycol> <orderbydir> limit 30 offset ? 
load.global.flags=select * from global_flags where global_id= 1
load.inst.country.enabled=select inst_id as id,name from institution where institution.enabled= true and country_id= ?
load.inst.enabled=select inst_id as id,name from institution where institution.enabled= true
load.institution.country.enabled=select inst_id as id,name from institution where institution.enabled= true and country_id= ?
load.institution.enabled=select inst_id as id,name from institution where institution.enabled= true
load.judges.off.contest=SELECT users.uid,users.username FROM users JOIN authorities ON (users.username= authorities.username) WHERE (authority= 'ROLE_ADMIN' or authority= 'ROLE_PSETTER' or authority = 'ROLE_SUPER_PSETTER' or authority='ROLE_JUDGE') and uid NOT IN (select contest_judges.id_admin from contest_judges join users on users.uid= contest_judges.id_admin where cid= ?) GROUP BY users.username, uid
load.language=select key,language,descripcion,enabled,lid,name_bin from language where lid= ?
load.language.key=select key,language,descripcion,enabled,lid,name_bin from language where key= ?
load.logs.pattern=select id as id,log,log_date as date,username from admin_log where log ilike ? order by id desc limit 30 offset ?
load.logs=select id,log,log_date as date,username from admin_log order by id desc limit 30 offset ? 
load.max.virtual.contest=SELECT max(vid) from individual_virtual_contest  where username= ?
is.past.contest=select exists(select cid from contest where now() > enddate and cid=?)
past.contests=select cid,name,registration,enddate,initdate from contest where now() > enddate and enabled= true order by enddate desc limit 50 offset ?
past.contests.pattern=select cid,name,registration,enddate,initdate from contest where now() > enddate and enabled= true and (name ilike ? or cid::character varying ilike ?) order by enddate desc limit 50 offset ?
load.problem.contestsetters=select problem.pid,problem.title as title from problem join problem_contest using (pid) where cid= ? order by level,orderp asc
load.problem.stats=select accu from problem join problem_stats on problem_stats.pid= problem.pid where problem.pid= ?
load.problems.admin.pattern.all=select p.pid,p.title,p.enable as enabled,contest,disable_24h from problem p where p.title ilike ? or p.pid = ? order by p.pid limit 50 offset ?
load.problems.admin.all=select p.pid,p.title,p.enable as enabled,contest,disable_24h from problem p order by p.pid limit 50 offset ?
load.problems.admin.pattern=select p.pid,p.title,p.enable as enabled,contest,disable_24h from problem p left join (select * from psetter_problem where user_id=?) pp on p.pid = pp.problem_id where user_id is not null and (p.title ilike ? or p.pid = ?) order by p.pid limit 50 offset ?
load.problems.admin=select p.pid,p.title,p.enable as enabled,contest,disable_24h from problem p left join (select * from psetter_problem where user_id=?) pp on p.pid = pp.problem_id where user_id is not null order by p.pid limit 50 offset ?
load.public.vcont=select vid as cid,start_time,enddate-initdate as duration,name,initdate as idate,individual_virtual_contest.username from individual_virtual_contest join contest on contest.cid= individual_virtual_contest.cid where is_public= true
load.public.virtual.contest=select vid as cid,start_time,enddate-initdate as duration,name,initdate as idate,individual_virtual_contest.username from individual_virtual_contest join contest on contest.cid= individual_virtual_contest.cid where is_public= true
load.running.vcont=SELECT vid from individual_virtual_contest  where now() >= start_time and username= ?
load.running.virtual.contest=SELECT cid from individual_virtual_contest  where now() >= start_time and username= ?
load.submission.admin=SELECT submition.uid,username,submition.pid,submit_id,submition.time,submition.memory,submition.fontsize as font,submition.date,status,language,submition.enabled,code from (submition join source on source.sid= submition.submit_id) where submit_id= ?
teams.admin.pattern=select last_connected_date,username,nick,registration_date as Rgdate,enabled,last_ip as lastip,online,coach,user_1,user_2,user_3 from users join team_profile using(uid) where username ilike ? or nick ilike ? order by registration_date desc limit 30 offset ?
teams.admin=select last_connected_date,username,nick,registration_date as rgdate,enabled,last_ip as lastip,online from users join team_profile using(uid) order by registration_date desc limit 30 offset ?
load.uid.submit=select uid from submition where status= ? and uid= ? and pid= ?
load.user.data=select users.uid,username,nick,email,fullname as name,lastname,institution.zip as Institution,country.zip as Country,country.name as Country_desc,institution.name as Institution_desc,points,points as score,ac as acc,wa,rte,tle,mle,ce,fle,pe,ole,last_accepted,last_submission,users.country_id,users.inst_id as Institution_id,registration_date as rgdate,ivf,gender,locale.description as Glanguage,language.language as Planguage,show_email,problem_notifications,contest_notifications,submition_notifications as submissionNotifications,newprivatemessage_notifications as newprivatemessageNotifications ,wboard_notifications as wboardNotifications from  public.users join institution on institution.inst_id= public.users.inst_id  join country on country.country_id= public.users.country_id join user_stats on user_stats.uid= public.users.uid join user_profile on users.uid= user_profile.uid join locale on locale.lid= users.locale join language on language.lid= users.lid where username= ? limit 1
load.user.status=select case when enabled is false then 'disabled' when days >= 30 and days < 90 then 'dormant' when days >= 90 or days is null then 'inactive' else 'active' end as status from (select enabled,cast (extract (day from last_connected_date - now() )as integer)*-1 as days from users u join user_profile using (uid) where username=?) tbl
update.last.login.date=update users set last_connected_date=now() where username=?
update.users.status=update users set status = sqry.status from (select uid,case when days >= 30 and days < 90 then 'dormant' when days >= 90 or days is null then 'inactive' else 'active' end as status from (select uid,cast (extract (day from last_connected_date - now() )as integer)*-1 as days from users u join user_profile using (uid) where u.enabled= true) tbl) sqry where users.uid = sqry.uid
users.admin.pattern=select status,ban_reason,last_connected_date,username,nick,registration_date as Rgdate,gender,enabled,last_ip as lastip,online from users join user_profile using(uid) where username ilike ? or nick ilike ? or email ilike ? limit 30 offset ?
users.admin=select status,ban_reason,last_connected_date,username,nick,registration_date as Rgdate,gender,enabled,last_ip as lastip,online from users join user_profile using(uid) limit 30 offset ?
load.users.but.one.virtual=select users.uid,username from users join user_profile using(uid) where enabled= true and username != ? and username not in (select username from individual_virtual_contest) order by username
load.users.but.one=select users.uid,username from users join user_profile using(uid) where enabled= true and username != ? order by username
load.users.off.contest.2=select users.uid,username from users join user_profile on users.uid= user_profile.uid where users.uid not in (select uid from user_contest where cid= ?) and users.enabled = true order by username
load.users.off.contest.3=select users.uid,username from users where users.uid not in (select uid from user_contest where cid= ?) and users.enabled = true order by username
load.users.off.contest=select users.uid,username from users join team_profile on users.uid= team_profile.uid where users.uid not in (select uid from user_contest where cid= ?) and users.enabled = true order by username
users.vcont=select contest.cid,enddate,enddate-initdate as duration,name,initdate as idate,private, initdate > now() as coming, now() between initdate and enddate as running from contest where uid= ? and virtual = true limit 50 offset ?
load.users.virtual.contest=select contest.cid,start_time as enddate,enddate-initdate as duration,name,initdate as idate,is_public, start_time > now() as coming, now() between start_time and end_time as running from individual_virtual_contest join contest on contest.cid= individual_virtual_contest.cid where username= ? limit 50 offset ?
load.users.recommender.hasprofile=select username from users where tags like '%1%' and username = ?
load.users.recommender.loaduserprofile=select * from user_profile join users on users.uid =user_profile.uid  where username = ?
load.users.recommender.loadrelatedprofile=select * from user_profile join users on users.uid = user_profile.uid where username <> ? and username in (select username from users where tags=?)
load.users.recommender.loadtags=select tags from users where username=?
load.users.recommender.udpatetags=update users set tags = ? where username = ?
load.users.recommender.suggestedproblemscoldstart=select problem.pid,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_stats on problem.pid = problem_stats.pid where enable= TRUE AND disable_24h= FALSE and problem.pid not in (select distinct pid from submition where username = ?) order by ac desc limit ?
load.users.recommender.suggestedproblemscoldstart.filtered=select * from (select problem.pid,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_stats on problem.pid = problem_stats.pid where enable= TRUE AND disable_24h= FALSE and problem.pid not in (select distinct pid from submition where username = ?) order by ac desc limit ?) as t WHERE (title ilike ? or pid = ?) <and> <orderby> limit ? OFFSET ?
load.users.recommender.suggestedproblemscoldstart.filtered.no.pattern=select * from (select problem.pid,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_stats on problem.pid = problem_stats.pid where enable= TRUE AND disable_24h= FALSE and problem.pid not in (select distinct pid from submition where username = ?) order by ac desc limit ?) as t WHERE true <and> <orderby> limit ? OFFSET ?
load.users.recommender.suggestedproblems=SELECT problem.pid,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_stats on problem.pid = problem_stats.pid join submition on submition.pid = problem.pid where status = 'Accepted' and problem.pid not in (select distinct pid from submition where username = ? and status='Accepted') and username in (?)group by problem.pid,ac,wa,pe,ce,rte,tle,fle,mle,ole,accu order by ac desc limit ?
load.users.recommender.suggestedproblems.filtered=select * from (SELECT problem.pid,title,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_stats on problem.pid = problem_stats.pid join submition on submition.pid = problem.pid where status = 'Accepted' and problem.pid not in (select distinct pid from submition where username = ? and status='Accepted') and username in (?) and enable= TRUE AND disable_24h = FALSE group by problem.pid,ac,wa,pe,ce,rte,tle,fle,mle,ole,accu ORDER BY ac desc LIMIT ?) as t WHERE (title ilike ? or pid = ?) <and>  <orderby> limit ? OFFSET ?
load.vcont.2=select vid,cid,username,creation_time as ctime,start_time as itime,end_time as etime,now() < start_time as coming,now() between start_time and end_time as running,father,is_public as ispublic from individual_virtual_contest order by creation_time desc limit 50 offset ?
load.vcont.byusername=select private,balloon,gallery,saris,cid,name,enabled,style,registration,frtime, deadtime,penalty,ioimark,ppoints,total_users, unfreeze_time,block as blocked,case when initdate > now() then initdate-now() else '0' end as tostart,gold,silver,bronze,accepted_by_level as acbylevels,accepted_limit as aclimit, enddate, initdate, rglimit, now() as now, show_stats,show_status,show_scoreboard,allow_registration,unfreeze_auto,show_stats_out,show_status_out,show_scoreboard_out,show_problem_out,show_ontest, now()-initdate as elapsed, enddate-now() as remaining from contest where cid = ?
load.vcont=select is_public,balloon,gallery,saris,cid,name,enabled,style,registration,frtime,deadtime,penalty,ioimark,ppoints,total_users,unfreeze_time,block as blocked,case when initdate > now() then initdate-now() else '0' end as tostart,gold,silver,bronze,accepted_by_level as acbylevels,accepted_limit as aclimit,end_time as enddate,start_time as initdate,initdate as rinitdate,rglimit,now() as now,show_stats,show_status,show_scoreboard,allow_registration,unfreeze_auto,show_stats_out,show_status_out,show_scoreboard_out,show_problem_out,show_ontest from contest join individual_virtual_contest using (cid) where vid= ?
load.virtual.contest.2=select vid,cid,username,creation_time as ctime,start_time as itime,end_time as etime,now() < start_time as coming,now() between start_time and end_time as running,father,is_public as ispublic from individual_virtual_contest order by creation_time desc limit 50 offset ?
load.virtual.contest=select is_public,cid,balloon,gallery,saris,name,enabled,style,registration,frtime,deadtime,penalty,ioimark,ppoints,total_users,unfreeze_time,block as blocked,case when initdate > now() then initdate-now() else '0' end as tostart,gold,silver,bronze,accepted_by_level as acbylevels,accepted_limit as aclimit,end_time as enddate,start_time as initdate,initdate as rinitdate,rglimit,now()) as now,show_stats,show_status,show_scoreboard,allow_registration,unfreeze_auto,show_stats_out,show_status_out,show_scoreboard_out,show_problem_out,show_ontest from contest join individual_virtual_contest using (cid) where vid= ?
load.virtual.contest.father=select father from individual_virtual_contest  where username = ?
load.virtual.contest.problem=select pid,title,description,input,output,input_example as inputex,output_example as outputex,author,comments as comments,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata from problem join users on problem.uid= users.uid join problem_contest using (pid) where enable= TRUE and pid = ? and problem_contest.cid = ?
load.virtual.contest.problems=SELECT distinct p.pid,title,pc.accu from problem_contest pc join problem p using(pid) where cid = ? order by pc.orderp asc limit 50 offset ?
load.virtual.stats=select language,sum(ac) as ac, sum(wa) as wa, sum(pe) as pe, sum(tle) as tle, sum(mle) as mle, sum(fle) as fle, sum(ole) as ole, sum(ce) as ce, sum(rte) as rte, sum(uq) as uq, sum(ivf) as ivf from language join language_virtual_stats on language.lid= language_virtual_stats.lid group by language.lid,language order by language
load.virtual.template=select cid,name from contest where virtual_template= true and enddate < now() order by name
load.practice.template=select cid,name from contest where virtual_template = true and enddate < now() and cid >= 10000 order by name
lock.problem=update user_problem set lock= true where accepted=true and user_id= ? and problem_id= ?
mail.enabled=select enabled_mail from global_flags where global_id= 1
mail.values=select mail_quote,consume_quote as consumed_quote from user_profile join users on user_profile.uid= users.uid where username= ?
balloontracker.in.contest=select exists(select * from balloontrackers where uid=? and cid=?)
mark.balloon=update contest_submition set balloon_notification = true where submit_id=?
mark.reply.clarification=update admin_clarification set reply= true where id_clarification= ?
max.available.cid=select max(cid) from contest where cid < 10000
max.clarification=select max(id_clarification) from clarification where id_team= ?
max.id.clarification=select max(id_clarification) from clarification where id_team= ?
my.clarifications=SELECT id_team,allusers as forall,clarification.pid,clarification.title,text,clarification.date,publicclarification,read as isread,clarification.id_clarification as id,username,request,reply, case when clarification.pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle, (select exists(select uid from users join contest_judges on users.uid= contest_judges.id_admin where cid= ? and uid= clarification.id_team) ) as judge from clarification join users on users.uid= clarification.id_team join user_clarification on clarification.id_clarification= user_clarification.id_clarification where id_contest= ? and teamfor= ? and clarification.id_clarification not in (SELECT clarification.id_clarification from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where teamfor != ? and general= true) order by date desc
my.clarifications.pattern=SELECT id_team,allusers as forall,clarification.pid,clarification.title,text,clarification.date,publicclarification,read as isread,clarification.id_clarification as id,username,request,reply, case when clarification.pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle, (select exists(select uid from users join contest_judges on users.uid= contest_judges.id_admin where cid= ? and uid= clarification.id_team) ) as judge from clarification join users on users.uid= clarification.id_team join user_clarification on clarification.id_clarification= user_clarification.id_clarification where id_contest= ? and teamfor= ? and clarification.id_clarification not in (SELECT clarification.id_clarification from clarification join user_clarification on clarification.id_clarification= user_clarification.id_clarification where teamfor != ? and general= true) and text ilike ? order by date desc
news.list.pattern=select nid,rate,title,overview,date,enabled from news where title ilike ? or overview ilike ? limit 30 offset ?
news.list=select nid,rate,title,overview,date,enabled from news limit 30 offset ?
news=select * from news where nid= ?
order.all.problem.pid=ORDER BY problem.pid
order.all.problems.asc=ORDER BY <orderby> asc
order.all.problems.desc=ORDER BY <orderby> desc
original.msg=select username,clarification.date,text,case when pid = 0 then 'General' else problem.title end as title from clarification join users on clarification.id_team= users.uid left join problem using(pid) where id_clarification= ?
overlaps.contest=select exists(select cid from contest  where (timestamp without time zone '<initdate>',enddate-initdate) overlaps (initdate,enddate) and enddate > now()) 
select.contest.problem.letters=select pid,chr(orderp + 64) as letter from problem_contest where cid=? order by orderp
pending.balloons=select cast( min(cs.date) as timestamp) as ddate,min(submit_id) as submit_id,u.username,min(uc.groupd) as groupd,min(pc.color) as color,chr(pc.orderp+64) as letter,min(u.nick) as userNick from contest_submition cs join user_contest uc on cs.uid = uc.uid and cs.cid = uc.cid join problem_contest pc on cs.pid = pc.pid and cs.cid = pc.cid join users u on u.uid = cs.uid where cs.balloon_notification=false and cs.cid=? and cs.virtual=false and cs.enabled=true and cs.status='Accepted' and cs.date < (select enddate - (interval '1 min'*frtime) from contest where cid = ?) group by u.username,letter order by ddate desc limit 10 offset ?
pending.balloons.grouped=select cast( min(cs.date) as timestamp) as ddate,min(submit_id) as submit_id,u.username,min(uc.groupd) as groupd,min(pc.color) as color,chr(pc.orderp+64) as letter,min(u.nick) as userNick from contest_submition cs join user_contest uc on cs.uid = uc.uid and cs.cid = uc.cid join problem_contest pc on cs.pid = pc.pid and cs.cid = pc.cid join users u on u.uid = cs.uid where cs.balloon_notification=false and cs.cid=? and cs.virtual=false and cs.enabled=true and cs.status='Accepted' and groupd=? and cs.date < (select enddate - (interval '1 min'*frtime) from contest where cid = ?) group by u.username,letter order by ddate desc limit 10 offset ?
problem.off.pid=select exists(select pid from problem where pid= ?)
problem.accepted.solutions=select submit_id,code,ext from submition join source on submition.submit_id = source.sid join language on submition.language = language.language where status = 'Accepted' and pid=? limit 1
problem.by.pid=select pid,enable as enabled,title,description,input,output,input_example as inputex,output_example as outputex,problem.id_source,problem_source.name || ' - ' || problem_source.author as author,comments as comments,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata,special_judge,disable_24h from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid where pid= ?
problem.classifications.by.pid=SELECT problem_classification.id_classification as idclassification,name,estimated_code_length as estimatedcodelength FROM problem_classification JOIN classifications ON problem_classification.id_classification= classifications.id_classification where pid= ? ORDER BY name
problem.classifications=SELECT id_classification as idclassification,name,estimated_code_length as estimatedcodelength FROM classifications ORDER BY name
problem.updateclassification=update classifications set name = ? where id_classification = ?
select.submition.sid=select * from submition where submit_id = ?
select.contest.submition.sid=select * from contest_submition where submit_id = ?
problem.contest.offset=select orderp from problem_contest where cid=? and pid=?
problem.contest=select pid,title,description,input,output,input_example as inputex,output_example as outputex,problem.id_source,problem_source.name || ' - ' || problem_source.author as author,comments,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata,level from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid join problem_contest using (pid) where enable= TRUE and pid= ? and problem_contest.cid= ?
problem.ismark.asfavorite.byuser=select exists(select user_id from user_problem_favorite where user_id= ? and problem_id= ?)
problem.level=select level from problem_contest where cid= ? and pid= ?
problem.solved.and.locked=select exists(select user_id from user_problem join users on user_id = uid where accepted=true and username= ? and problem_id= ? and lock=true)
problem.locked=select lock from user_problem where accepted=true and user_id= ? and problem_id= ?
problem.locked.all=select problem_id from user_problem join users on user_id=uid where username=? and lock=true
problem.mark.asfavorite.byuser=insert into user_problem_favorite values(?,?)
problem.solution.count=SELECT count(submit_id) from submition  where  pid= ?
problem.solved.by.user.vcont.frozen=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and virtual= true and cid= ?"; AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?)  group by pid order by pid
problem.solved.by.user.vcont=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and virtual= true and cid= ?  group by pid order by pid
problem.solved.by.user.virtual.contest.frozen=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and virtual= true and cid= ?"; AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?)  group by pid order by pid
problem.solved.by.user.virtual.contest=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and virtual= true and cid= ?  group by pid order by pid
problem.submit.data.by.pid=select pid,max_total_execution_time as time,max_memory as memory,max_source_code_lenght as fontsize,max_case_execution_time as casetimelimit,special_judge from problem join problem_limits on pid = problem_id where pid= ? and language_id = ?
problem.title.off.pid=select exists(select title from problem where title= ? and pid != ?)
problem.tried.user.in.contest.1=SELECT pid from contest_submition where username= ? and status != 'Accepted' and contest_submition.cid= ?   AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?) group by pid having pid not in (SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and contest_submition.cid= ?  AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?) group by pid order by pid)
problem.tried.user.in.contest=SELECT pid from contest_submition where username= ? and status != 'Accepted' and contest_submition.cid= ?  group by pid having pid not in (SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and contest_submition.cid= ? group by pid order by pid)

problems.contest=select problem_contest.color as balloon_color,problem_contest.pid,title,level from problem join problem_contest using (pid) where cid=? order by level,orderp asc
problems.favorite.byuser=SELECT problem_id from user_problem_favorite where user_id= ?
problems.off.contest=select pid || '-' || title as title,pid from problem where pid not in (select pid from problem_contest where cid= ?) order by pid asc
problems.virtual.enabled=select pid || '-' || title as title,pid from problem where enable = true and disable_24h = false order by pid asc
problems.solved.1=SELECT problem.pid,problem.title from problem join user_problem on problem.pid = user_problem.problem_id where accepted = true and user_id=?
problems.solved.by.user=SELECT pid from submition where status= 'Accepted' and submition.username= ? group by pid order by pid
problems.solved.byuser=SELECT problem_id from user_problem where accepted=true and user_id= ?
problems.solved.in.contest.frozen=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.uid= ? and enabled= true and contest_submition.cid= ? and contest_submition.date < (select enddate - frtime * interval '1 Minutes' from contest where cid= ?)  group by pid
problems.solved.in.contest=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.uid= ? and enabled= true and contest_submition.cid= ?  group by pid
problems.solved=SELECT pid from submition where status= 'Accepted' and submition.username= ? and enabled= true group by pid order by pid
problems.tried.by.user=SELECT pid from submition where username= ? and status != 'Accepted' group by pid having pid not in (SELECT pid from submition where status= 'Accepted' and submition.username= ? group by pid order by pid)
problems.tried.byuser=SELECT pid from submition where username= ? and status != 'Accepted' group by pid having pid not in (SELECT problem_id from user_problem where accepted=true and user_id= ?)
problems.tried.vcont.1=AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?)
problems.tried.vcont.2=group by pid having pid not in (SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and contest_submition.cid= ?
problems.tried.vcont=SELECT pid from contest_submition where username= ? and status != 'Accepted' and virtual= true and contest_submition.cid= ?
problems.tried.virtual.contest.1=AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?)
problems.tried.virtual.contest.2=group by pid having pid not in (SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and contest_submition.cid= ?
problems.tried.virtual.contest=SELECT pid from contest_submition where username= ? and status != 'Accepted' and virtual= true and contest_submition.cid= ?
public.clarification.id=select pid,date,username,title,text as description,publicclarification as publics,general as forall,case when pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle,id_clarification as id  from clarification join users on users.uid= clarification.id_team where id_clarification= ? and id_contest= ? and publicclarification= true
public.clarification=SELECT clarification.pid as pid,clarification.title as title,text as description,clarification.date as date,publicclarification as publics,id_clarification as id,username from clarification join users on users.uid= clarification.id_team where id_contest= ? and publicclarification= true
public.clarifications=SELECT id_team as idteam,clarification.pid,clarification.title,text as description,clarification.date,is_read as isread,id_clarification as id,username,case when clarification.pid > 0 then (select distinct title from problem where pid= clarification.pid) end as ptitle from clarification join users on users.uid= clarification.id_team where id_contest= ? and publicclarification= true order by date desc
ranking.acm.minimum=SELECT min(a_time),min(b_time),min(c_time),min(d_time),min(e_time),min(f_time),min(g_time),min(h_time),min(i_time),min(j_time),min(k_time),min(l_time) from user_contest where cid= ? and virtual= false 
ranking.acm.minimum.group=SELECT min(a_time),min(b_time),min(c_time),min(d_time),min(e_time),min(f_time),min(g_time),min(h_time),min(i_time),min(j_time),min(k_time),min(l_time) from user_contest where cid= ? and groupd = ?
ranking.acm=SELECT user_contest.uid,username,nick,accepted,penalty,country.name,country.zip,institution.name,institution.zip,user_contest.A_time,user_contest.A_beforeac,user_contest.A_afterac,user_contest.B_time,user_contest.B_beforeac,user_contest.B_afterac,user_contest.C_time,user_contest.C_beforeac,user_contest.C_afterac,user_contest.D_time,user_contest.D_beforeac,user_contest.D_afterac,E_time,user_contest.E_beforeac,user_contest.E_afterac,user_contest.F_time,user_contest.F_beforeac,user_contest.F_afterac,user_contest.G_time,user_contest.G_beforeac,user_contest.G_afterac,user_contest.H_time,user_contest.H_beforeac,user_contest.H_afterac,user_contest.I_time,user_contest.I_beforeac,user_contest.I_afterac,user_contest.J_time,J_beforeac,user_contest.J_afterac,user_contest.K_time,user_contest.K_beforeac,user_contest.K_afterac,user_contest.L_time,user_contest.L_beforeac,user_contest.L_afterac,a_pending,b_pending,c_pending,d_pending,e_pending,f_pending,g_pending,h_pending,i_pending,j_pending,k_pending,l_pending,user_contest.groupd,online,coach,user_1,user_2,user_3 ,greatest(case when user_contest.A_time < 100000000 then user_contest.A_time else 0 end,case when user_contest.B_time < 100000000 then user_contest.B_time else 0 end,case when user_contest.C_time < 100000000 then user_contest.C_time else 0 end,case when user_contest.D_time < 100000000 then user_contest.D_time else 0 end,case when user_contest.E_time < 100000000 then user_contest.E_time else 0 end,case when user_contest.F_time < 100000000 then user_contest.F_time else 0 end,case when user_contest.G_time < 100000000 then user_contest.G_time else 0 end,case when user_contest.H_time < 100000000 then user_contest.H_time else 0 end,case when user_contest.I_time < 100000000 then user_contest.I_time else 0 end,case when user_contest.J_time < 100000000 then user_contest.J_time else 0 end,case when user_contest.K_time < 100000000 then user_contest.K_time else 0 end,case when user_contest.L_time < 100000000 then user_contest.L_time else 0 end) as lastacc from user_contest inner join public.users on public.users.uid= user_contest.uid left join team_profile on team_profile.uid = users.uid join country on users.country_id= country.country_id join institution on users.inst_id= institution.inst_id where cid= ? and virtual= false  order by (accepted) desc, penalty asc, lastacc asc,(a_beforeac + b_beforeac + c_beforeac + d_beforeac + e_beforeac + f_beforeac + g_beforeac + h_beforeac + i_beforeac + j_beforeac + k_beforeac + l_beforeac) desc
ranking.acm.group.names=select groupd from user_contest where cid=? and virtual=false group by groupd order by groupd
ranking.acm.group=SELECT user_contest.uid,username,nick,accepted,penalty,lastacc,country.name,country.zip,institution.name,institution.zip,user_contest.A_time,user_contest.A_beforeac,user_contest.A_afterac,user_contest.B_time,user_contest.B_beforeac,user_contest.B_afterac,user_contest.C_time,user_contest.C_beforeac,user_contest.C_afterac,user_contest.D_time,user_contest.D_beforeac,user_contest.D_afterac,E_time,user_contest.E_beforeac,user_contest.E_afterac,user_contest.F_time,user_contest.F_beforeac,user_contest.F_afterac,user_contest.G_time,user_contest.G_beforeac,user_contest.G_afterac,user_contest.H_time,user_contest.H_beforeac,user_contest.H_afterac,user_contest.I_time,user_contest.I_beforeac,user_contest.I_afterac,user_contest.J_time,J_beforeac,user_contest.J_afterac,user_contest.K_time,user_contest.K_beforeac,user_contest.K_afterac,user_contest.L_time,user_contest.L_beforeac,user_contest.L_afterac,a_pending,b_pending,c_pending,d_pending,e_pending,f_pending,g_pending,h_pending,i_pending,j_pending,k_pending,l_pending,user_contest.groupd,online,coach,user_1,user_2,user_3 from user_contest inner join public.users on public.users.uid= user_contest.uid left join team_profile on team_profile.uid = users.uid join country on users.country_id= country.country_id join institution on users.inst_id= institution.inst_id where cid= ? and user_contest.groupd = ? and virtual= false order by (accepted) desc, penalty asc, lastacc asc
ranking.acm.selected.group=SELECT user_contest.uid,username,nick,accepted,penalty,country.name,country.zip,institution.name,institution.zip,user_contest.A_time,user_contest.A_beforeac,user_contest.A_afterac,user_contest.B_time,user_contest.B_beforeac,user_contest.B_afterac,user_contest.C_time,user_contest.C_beforeac,user_contest.C_afterac,user_contest.D_time,user_contest.D_beforeac,user_contest.D_afterac,E_time,user_contest.E_beforeac,user_contest.E_afterac,user_contest.F_time,user_contest.F_beforeac,user_contest.F_afterac,user_contest.G_time,user_contest.G_beforeac,user_contest.G_afterac,user_contest.H_time,user_contest.H_beforeac,user_contest.H_afterac,user_contest.I_time,user_contest.I_beforeac,user_contest.I_afterac,user_contest.J_time,J_beforeac,user_contest.J_afterac,user_contest.K_time,user_contest.K_beforeac,user_contest.K_afterac,user_contest.L_time,user_contest.L_beforeac,user_contest.L_afterac,a_pending,b_pending,c_pending,d_pending,e_pending,f_pending,g_pending,h_pending,i_pending,j_pending,k_pending,l_pending,user_contest.groupd,online,coach,user_1,user_2,user_3 ,greatest(case when user_contest.A_time < 100000000 then user_contest.A_time else 0 end,case when user_contest.B_time < 100000000 then user_contest.B_time else 0 end,case when user_contest.C_time < 100000000 then user_contest.C_time else 0 end,case when user_contest.D_time < 100000000 then user_contest.D_time else 0 end,case when user_contest.E_time < 100000000 then user_contest.E_time else 0 end,case when user_contest.F_time < 100000000 then user_contest.F_time else 0 end,case when user_contest.G_time < 100000000 then user_contest.G_time else 0 end,case when user_contest.H_time < 100000000 then user_contest.H_time else 0 end,case when user_contest.I_time < 100000000 then user_contest.I_time else 0 end,case when user_contest.J_time < 100000000 then user_contest.J_time else 0 end,case when user_contest.K_time < 100000000 then user_contest.K_time else 0 end,case when user_contest.L_time < 100000000 then user_contest.L_time else 0 end) as lastacc from user_contest inner join public.users on public.users.uid= user_contest.uid left join team_profile on team_profile.uid = users.uid join country on users.country_id= country.country_id join institution on users.inst_id= institution.inst_id where cid= ? and virtual= false and groupd=? order by (accepted) desc, penalty asc, lastacc asc,(a_beforeac + b_beforeac + c_beforeac + d_beforeac + e_beforeac + f_beforeac + g_beforeac + h_beforeac + i_beforeac + j_beforeac + k_beforeac + l_beforeac) desc
ranking.position.country=select rank from (SELECT username,row_number()  over (order by points desc,ac desc,total desc) as rank from (select username,points,(ac+rte+ce+wa+mle+tle+ole+pe) as total,ac from user_profile join users on users.uid= user_profile.uid join user_stats on user_stats.uid= user_profile.uid where users.enabled=true and country_id= ?) as name) as ranking where username= ?
ranking.position.institution=select case when rank= 0 then -1 else rank end from (SELECT username,row_number()  over (order by points desc,ac desc,total desc) as rank from (select username,points,(ac+rte+ce+wa+mle+tle+ole+pe) as total,ac from user_profile join users on users.uid= user_profile.uid join user_stats on user_stats.uid= user_profile.uid where users.enabled=true and inst_id= ?) as name) as ranking where username= ?
ranking.position=select rank from (SELECT username,row_number()  over (order by points desc,ac desc,total desc) as rank from (select username,points,(ac+rte+ce+wa+mle+tle+ole+pe) as total,ac from user_profile join users on users.uid= user_profile.uid join user_stats on user_stats.uid= user_profile.uid where users.enabled=true) as name) as ranking where username=?
reset.rejudge.status=update submition set rejudge_status = 0
repoint.contest.1=select uid,pid,submit_id as submitid,status,cid,language from contest_submition where cid= ? and contest_submition.date < (select enddate - interval '<frtime> minutes' from contest where cid= ?) order by contest_submition.date
repoint.contest=select uid,pid,submit_id as submitid,status,cid,language from contest_submition where cid= ? order by contest_submition.date
rule=select rule from global_access_rules
running.contests=select cid,name,registration,enddate,initdate from contest where now() between initdate and enddate and enabled= true order by enddate desc limit 50 offset ?
save.course=UPDATE course  set course_name   = ?, course_type = ?,enabled = ?, initdate = ?, is_public = ?, chapter = ?, problem_points = ?, score_active = ? where course_id = ?
search.problems.admin=select problem.pid,title,(ac+wa+pe+mle+tle+ole+ce+rte) as submitions,ac as accepted from problem join problem_stats on problem_stats.pid= problem.pid where problem.title ilike '<pattern>'
search.problems=select problem.pid,title,(ac+wa+pe+mle+tle+ole+ce+rte) as submitions,ac as accepted from problem join problem_stats on problem_stats.pid= problem.pid where problem.title ilike '<pattern>' and problem.enable= true and problem.contest= 0
select.username.by.id=select username from users where uid=?
select.available.problems.course=select pid || '-' || title as title,pid from problem where enable = true and disable_24h = false and pid not in (SELECT content_address from chapter_content  join chapter using(chapter_id) join course using(course_id) where  content_type = 1 and course_id = ?) order by pid asc
select.chapterid=select chapter_id from chapter  where course_id = ? and chapter_number = ?
select.classifications=SELECT id_classification as idclassification,name FROM classifications ORDER BY name
select.countryid.byusername=select country_id from users where username = ?
select.course.problems=select pid || '-' || title as title,pid from problem where enable = true and disable_24h = false and pid in (SELECT content_address from chapter_content  join chapter using(chapter_id) join course using(course_id) where  content_type = 1 and course_id = ?) order by pid asc
select.course.problems.chapter=select pid || '-' || title as title,pid from problem where enable = true and disable_24h = false and pid in (SELECT content_address from chapter_content  join chapter using(chapter_id) join course using(course_id) where  content_type = 1 and course_id = ? and chapter_number = ?) order by pid asc
select.course.materials.chapter=SELECT content_address, content_id from chapter_content join chapter using(chapter_id) join course using(course_id) where course_id = ? and chapter_number = ? and content_type = 2
select.instid.byusername=select inst_id from users where username = ?
select.problem.by.id=select * from problem where pid = ?

select.problem.i18n.1=select problem.pid,title,title_es,title_pt,description,description_es,description_pt,input,input_es,input_pt,output,output_es,output_pt,comments,comments_es,comments_pt from problem where problem.pid= ?
select.problem.i18n.2=select problem.pid,title,title_es,title_pt,description,description_es,description_pt,input,input_es,input_pt,output,output_es,output_pt,comments,comments_es,comments_pt from problem where problem.pid= ? and disable_24h= false and enable= TRUE
select.problem.bycode.1=select special_judge,forum_link,problem.pid,title,title_es,title_pt,description,description_es,description_pt,input,input_es,input_pt,output,output_es,output_pt,input_example as inputex,output_example as outputex,problem.id_source,problem_source.name || ' - ' || problem_source.author as author, comments,comments_es,comments_pt,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata ,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid JOIN problem_stats ON problem_stats.pid= problem.pid where problem.pid= ?
select.problem.bycode.2=select special_judge,forum_link,problem.pid,title,title_es,title_pt,description,description_es,description_pt,input,input_es,input_pt,output,output_es,output_pt,input_example as inputex,output_example as outputex,problem.id_source,problem_source.name || ' - ' || problem_source.author as author, comments,comments_es,comments_pt,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata ,(ac+wa+pe+ce+rte+tle+mle+ole) AS submitions,ac,accu,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid JOIN problem_stats ON problem_stats.pid= problem.pid where problem.pid= ? and disable_24h= false and enable= TRUE 
select.problem.classifications=SELECT problem_classification.id_classification as idclassification,name,complexity FROM problem_classification JOIN classifications ON problem_classification.id_classification= classifications.id_classification where pid= ? ORDER BY name
select.problem.languages=select lid,language,key from language join problem_language using(lid) where language.enabled= true and pid= ? order by language
select.problem.limits=SELECT * FROM problem_limits JOIN language ON lid = language_id WHERE problem_id = ? ORDER BY priority DESC
select.user.activation.key=select u.username,u.uid,aa.act_id,aa.registration from account_activation aa join users u using (username) where aa.user_key= ?
select.activations=select username,act_id as id,user_key as token, date,registration from account_activation order by date desc limit 50 offset ?
filtered.activations=select username,act_id as id,user_key as token,date,registration from account_activation where username like ? order by date desc limit 50 offset ?
count.select.activations=select count(*) from account_activation
count.filtered.activations=select count(*) from account_activation where username like ?
select.username.byuid=SELECT username from users where uid= ?
select.virtual.usernames.father=select username from individual_virtual_contest where father = (select father from individual_virtual_contest  where username = ? and father = vid)
user.by.id=SELECT * from users where uid= ?
select.faq.by.id=select * from faq where id = ?
select.email.by.uid=SELECT email from user_profile where uid=?
select.email.by.passcode=SELECT email from user_profile where passcode= ?
select.emails.by.notification=select email from users u join user_profile using(uid) where u.email_notifications = TRUE
select.emails.by.notification.contest=select email from users u join user_profile using(uid) join user_contest using(uid) where cid=? and u.email_notifications=TRUE
select.emails.by.notification.country=select email from users u join user_profile using(uid) where country_id=? and u.email_notifications=TRUE
select.emails.by.notification.institution=select email from users u join user_profile using(uid) where inst_id=? and u.email_notifications=TRUE
select.problem.bycode.1accepted.in.contest=select accepted from user_contest where cid= ? and uid= ?
select.users.ranking=SELECT status,country.zip as czip,country.name as cname,institution.zip as izip,institution.name as iname,username,nick,(ac+rte+ce+wa+mle+tle+ole+pe) as total,ac,uaccu as accu,points,online,case when (ac+wa+pe+ce+rte+tle+mle+ole) > 0 then (cast(ac as double precision)/(ac+wa+pe+ce+rte+tle+mle+ole))*100 else 0 end as accp from public.users join country on public.users.country_id=country.country_id join institution on public.users.inst_id= institution.inst_id join user_stats on user_stats.uid= public.users.uid join user_profile on user_profile.uid= users.uid where users.enabled= true
solved.by.user.cont.frozen=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and cid= ?  AND contest_submition.date < (Select enddate - interval '<frtime> Minutes' from contest where contest.cid= ?) group by pid order by pid
solved.by.user.cont=SELECT pid from contest_submition where status= 'Accepted' and contest_submition.username= ? and cid= ?  group by pid order by pid
solved.contest.problem.bef=select exists (SELECT submit_id from contest_submition where uid= ? and pid= ? and cid= ? and status= 'Accepted' and submit_id < ?)
solved=select exists(SELECT submit_id from submition where uid= ? and pid= ? and status= 'Accepted')
source.code.view.enabled=select enabled_source_code_view from global_flags where global_id= 1
statistics.by.pid=SELECT title,ac,wa,pe,tle,mle,fle,ole,ce,rte,uq,ivf,(ac+wa+pe+tle+mle+ole+ce+rte+uq+ivf) as submitions,problem.pid as pid from problem join problem_stats on problem_stats.pid= problem.pid where problem.pid= ?
statistics.contest.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(fle) as sle, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(wa)) as total FROM language JOIN language_stats_contest USING (lid) where cid= ?
statistics.contest.total.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(uq) as uq, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(uq)+sum(wa)) as total FROM language JOIN language_stats_contest USING (lid) where cid= ?
statistics.contest=SELECT language, ac as acc, ce, fle, ivf, mle, ole, pe, rte, tle, uq, wa, key,(ac+ce+ivf+mle+ole+pe+rte+tle+uq+wa) as total from language join language_stats_contest using(lid) where cid= ? order by language
statistics.global.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(wa) as wa, (sum(ac)+sum(ce)+sum(fle)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(wa)) as total FROM language JOIN language_stats_contest USING (lid)
statistics.global.total.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(fle) as fle, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(uq) as uq, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(uq)+sum(wa)) as total FROM language JOIN language_stats_contest USING (lid)
statistics.global=SELECT language, sum(ac) as acc, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole, sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(uq) as uq, sum(wa) as wa, key,(sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(uq)+sum(wa)) as total from language join language_stats_contest using(lid) group by language,key order by language
statistics.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(wa)) as total FROM language JOIN language_stats USING (lid)
statistics.total.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(uq) as uq, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(uq)+sum(wa)) as total FROM language JOIN language_stats USING (lid) where language.enabled
statistics.virtual.status=SELECT sum(ac) as ac, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(wa)) as total FROM language JOIN language_virtual_stats USING (lid)
statistics.virtual.total.status=SELECT sum(ac) as acc, sum(ce) as ce, sum(ivf) as ivf, sum(mle) as mle, sum(ole) as ole,sum(pe) as pe, sum(rte) as rte, sum(tle) as tle, sum(uq) as uq, sum(wa) as wa, (sum(ac)+sum(ce)+sum(ivf)+sum(mle)+sum(ole)+sum(pe)+sum(rte)+sum(tle)+sum(uq)+sum(wa)) as total FROM language JOIN language_virtual_stats USING (lid)
statistics.virtual=SELECT language, ac as acc, ce, fle, ivf, mle, ole, pe, rte, tle, uq, wa, key,(ac+ce+ivf+mle+ole+pe+rte+tle+uq+wa) as total from language join language_virtual_stats using(lid) order by language
submit.enabled=select enabled_submission from global_flags where global_id= 1
select.status.submit.by.id=SELECT status from submition where submit_id=?
submit.pid.title=select pid from problem where title= ?
toggle.submit=update submition set enabled = not enabled where submit_id=? returning enabled
toggle.submit.cid=update contest_submition set enabled = not enabled where submit_id=? returning enabled
total.accu.problem.contest.4=select (ac+wa+rte+ce+pe+uq+mle+ole+tle) as total,accu from problem_contest where pid= ? and cid= ?
total.accu.problem.contest=select (ac+wa+rte+ce+pe+uq+mle+ole+tle) as total,accu from problem_contest where pid= ? and cid= ?
training.statistics=SELECT language, case when(ac is null) then 0 else ac end as acc, case when(ce is null) then 0 else ce end , case when(fle is null) then 0 else fle end , case when(ivf is null) then 0 else ivf end , case when(mle is null) then 0 else mle end , case when(ole is null) then 0 else ole end , case when(pe is null) then 0 else pe end , case when(rte is null) then 0 else rte end , case when(tle is null) then 0 else tle end , case when(uq is null) then 0 else uq end , case when(wa is null) then 0 else wa end , key,case when((ac+ce+ivf+mle+ole+pe+rte+tle+uq+wa) is null) then 0 else (ac+ce+ivf+mle+ole+pe+rte+tle+uq+wa) end as total from language left join language_stats on language.lid= language_stats.lid where language.enabled order by language
try.but.unsolved=select exists(SELECT submit_id from submition where uid= ? and pid= ? and status != 'Accepted')
update.after.submit.contest.3.2=update user_contest set points= points + ?,accepted= accepted + 1 where uid= ? and cid= ?
update.after.submit.contest.3=UPDATE user_contest set points= points - ? where uid in (select uid from contest_submition where pid= ? and status= 'Accepted' and cid= ?) and (points - ?) > 0 and cid= ?
update.after.submit.contest.4=update problem_contest set accu= accu + 1 where pid= ? and cid= ?
update.after.submition.contest.virtual=update language_virtual_stats set <key>= <key> + 1 where lid in (select lid from language where language= ?)
update.announcement=update announcements set content= ?, enabled= ?, username= ?, contest_id= ?, date= now() where aid= ?
update.blocked.contest=update contest set block= ? where cid= ?
update.freeze.blocked.contest=update contest set block= ?,unfreeze_auto=? where cid= ?
update.change.time=update users set change_time= now() where uid= ?
update.chapter=UPDATE chapter  set chapter_name  = ?, initdate = ? where course_id = ? and chapter_number = ?
update.clarification=update clarification set reply= true where id_clarification= ?
update.clarification.read=update user_clarification set read = true where id_clarification = ? and teamfor = ?
update.contest.flags=update contest set gallery=?,balloon=?,saris=?,show_stats= ?,show_stats_out= ?,show_status= ?,show_status_out= ?,show_scoreboard= ?,show_scoreboard_out= ?,allow_registration= ?,unfreeze_auto= ?,show_problem_out= ?,show_ontest= ? where cid= ?
update.contest.global.settings.4=update contest set gallery=?,balloon=?,levels= ?,accepted_by_level= ?,accepted_limit= ?,ppoints= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings.ioi=update contest set gallery=?,balloon=?,ioimark= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings.points=update contest set gallery=?,balloon=?,ppoints= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings.tusers.4=update contest set gallery=?,balloon=?,levels= ?,accepted_by_level= ?,accepted_limit= ?,ppoints= ?,total_users= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings.tusers.ioi=update contest set gallery=?,balloon=?,ioimark= ?,total_users= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings.tusers.points=update contest set gallery=?,balloon=?,ppoints= ?,total_users= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings.tusers=update contest set gallery=?,balloon=?,penalty= ?,frtime=?,deadtime= ?,unfreeze_time=?,total_users= ?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.global.settings=update contest set gallery=?,balloon=?,penalty= ?,frtime=?,deadtime= ?,unfreeze_time=?,gold= ?,silver= ?,bronze= ? where cid= ?
update.contest.guest.group=update contest set guest_group=? where cid=?
update.contest.manage=update contest set name= ?,initdate= ?,enddate= ?,rglimit= ?,style= ?,registration= ?,enabled= ?,contestant= ?,virtual_template= ?,block=?,grouped=? where cid= ?                    
update.contest.overview=update contest set overview= ? where cid= ?
update.contest.submission.1=update contest_source set code= ? where sid= ?
update.contest.submission=update contest_submition set time= ?,memory= ?,fontsize= ?,status= ?,enabled= ? where submit_id= ?
update.contest.virtual.after.submition=update language_virtual_stats set <key>= <key> + 1 where lid in (select lid from language where language= ?)
update.country.2=update country set name= ?,zip= ?,zip_two= ?, website= ?,enabled= ? where country_id= ?
update.country=update country set name= ?,zip= ?,enabled= ? where country_id= ?
update.course.overview=UPDATE course  set course_overview = ?  where course_id = ?
update.flags=update global_flags set mail_notification_disabled=?,maintenance_mode = ?, enabled_mail= ?, enabled_source_code_view= ?, enabled_submission= ? where global_id= 1
update.import.general.from.contest=update contest set style= ?,registration= ?,total_users= ?,deadtime= ?,frtime= ?,penalty= ?,rglimit= now(),ioimark= ?,ppoints= ?,unfreeze_time= ? where cid= ?
update.individual.vcont=update individual_virtual_contest set end_time= start_time + (select enddate-initdate from contest where cid= ?), father= vid where cid= ? and username= ?
update.individual.virtual.contest=update individual_virtual_contest set end_time= start_time + (select enddate-initdate from contest where cid= ?), father= vid where cid= ? and username= ?
update.inst=update institution set name= ?,zip= ?,enabled= ?,country_id= ?,website = ? where inst_id= ?
update.institution=update institution set name= ?,zip= ?,enabled= ?,country_id= ? where inst_id= ?
update.lang.stats.after.submition=update language_stats set <key>= <key> + 1 where lid in (select lid from language where language= ?)
update.lang.stats.after.submition.for.removal=update language_stats set <key>= <key> - 1 where lid in (select lid from language where language= ?)

upsert.user.stats.contest.key=WITH upsert AS (update user_stats_contest set <key>= <key> + 1 where uid=? and cid= ? RETURNING *) insert into user_stats_contest (uid,<key>,cid) select ?,1,? WHERE NOT EXISTS (SELECT * FROM upsert);
upsert.problem.contest.contest.key=WITH upsert AS (update problem_contest set <key>= <key> + 1 where pid=? and cid= ? RETURNING *) insert into problem_contest (pid,<key>,cid) select ?,1,? WHERE NOT EXISTS (SELECT * FROM upsert);
upsert.language.stats.contest.key=WITH upsert AS (update language_stats_contest set <key>= <key> + 1 where lid=(select lid from language where language= ?) and cid= ? RETURNING *) insert into language_stats_contest (lid,<key>,cid) select (select lid from language where language= ?),1,? WHERE NOT EXISTS (SELECT * FROM upsert);
upsert.language=WITH upsert AS (update language set language=?,key=?,name_bin= ?,enabled= ?,descripcion= ? where lid=? RETURNING *) insert into language (language,key,name_bin,enabled,descripcion) select ?,?,?,?,? WHERE NOT EXISTS (SELECT * FROM upsert);

update.passcode=update user_profile set passcode=? where email=?;
update.last.ip=update users set last_ip= ? where username= ?
update.last.user.accepted.submit=update user_stats set last_accepted= (select submition.date from submition where submit_id= ?) where uid= ?
update.last.user.submit=update user_stats set last_submission= (select submition.date from submition where submit_id= ?) where uid= ?
update.level.2=select count(*) from (SELECT contest_submition.pid from contest_submition  join problem_contest on contest_submition.pid= problem_contest.pid  where uid= ? and level= ? and status= 'Accepted' and contest_submition.cid= ? and problem_contest.cid= ? and submit_id <= ? group by contest_submition.pid) as query
update.level.3=update user_contest set current_level= current_level + 1 where cid= ? and uid= ?
update.level=update user_contest set current_level= (select levels from contest where cid= ?) where cid= ? and uid= ?
update.news=update news set title=?,overview=?,content=?,rate=?,enabled=? where nid= ?
update.password.bypasscode=update users set password= ? where users.uid= (select uid from user_profile where passcode= ?)
update.plagicoj.user.profile.1=INSERT INTO plagicoj_user_profile(id_plagicoj_user_profile,cant_dictums,sum_dictums) VALUES (?,?,?) 
update.plagicoj.user.profile=UPDATE plagicoj_user_profile SET cant_dictums= cant_dictums + ?, sum_dictums= sum_dictums + ? WHERE id_plagicoj_user_profile= ?
update.problem.contest.accu=update problem_contest set accu = (select count(distinct uid) from contest_submition where pid= ? and cid= ? and accepted) where pid = ? and cid=?

update.problem.contest=UPDATE problem SET contest= 1 where pid= ?
update.problem.stats.after.submition=update problem_stats set <key>= <key> + 1 where pid= ?
update.problem.stats.after.submition.for.removal=update problem_stats set <key>= <key> - 1 where pid= ?
update.problem.stats=update problem_stats set accu= accu + 1 where pid= ?
update.problem.stats.for.removal=update problem_stats set accu= accu - 1 where pid= ?
update.problem.i18n=update problem set title= ?,title_es= ?,title_pt= ?,description= ?,description_es= ?,description_pt= ?,input= ?,input_es= ?,input_pt= ?,output= ?,output_es= ?,output_pt= ?,comments= ?,comments_es= ?,comments_pt= ? where pid= ?
update.problem=update problem set forum_link=?,title= ?,description= ?,input= ?,output= ?,input_example= ?,output_example= ?,id_source= ?,comments= ?,time= ?,memory= ?,fontsize= ?,contest= ?,pid= ?,enable= ?,case_time_limit= ?,multidata= ?,special_judge= ?, disable_24h= ?,uid=? where pid= ?
update.problem.no.uid=update problem set forum_link=?,title= ?,description= ?,input= ?,output= ?,input_example= ?,output_example= ?,id_source= ?,comments= ?,time= ?,memory= ?,fontsize= ?,contest= ?,pid= ?,enable= ?,case_time_limit= ?,multidata= ?,special_judge= ?, disable_24h= ? where pid= ?

update.reply.clarification=update admin_clarification set reply= true where id_clarification= ?
update.repoint.contest=update contest set repointing= ? where cid= ?

update.reset.contest=update user_contest set penalty= 0,accepted= 0,lastacc= (select enddate from contest where cid=?),points= 0 where cid= ?
update.reset.contest.2=UPDATE user_contest  set current_level= 1,a_time= 100000000,b_time= 100000000,c_time= 100000000,d_time= 100000000,e_time= 100000000,f_time= 100000000,g_time= 100000000,h_time= 100000000,i_time= 100000000,j_time= 100000000,k_time= 100000000,l_time= 100000000,a_beforeac= 0,b_beforeac= 0,c_beforeac= 0,d_beforeac= 0,e_beforeac= 0,f_beforeac= 0,g_beforeac= 0,h_beforeac= 0,i_beforeac= 0,j_beforeac= 0,k_beforeac= 0,l_beforeac= 0,a_afterac= 0,b_afterac= 0,c_afterac= 0,d_afterac= 0,e_afterac= 0,f_afterac= 0,g_afterac= 0,h_afterac= 0,i_afterac= 0,j_afterac= 0,k_afterac= 0,l_afterac= 0,a_pending= 0,b_pending= 0,c_pending= 0,d_pending= 0,e_pending= 0,f_pending= 0,g_pending= 0,h_pending= 0,i_pending= 0,j_pending= 0,k_pending= 0,l_pending= 0 where cid= ?
update.reset.contest.3=update user_stats_contest set ac= 0,wa= 0,pe= 0,rte= 0,ce= 0,mle= 0,fle= 0,ole= 0,tle= 0,uq= 0 where cid= ?
update.reset.contest.4=update problem_contest set ac= 0,wa= 0,pe= 0,rte= 0,ce= 0,mle= 0,fle= 0,ole= 0,tle= 0,uq= 0,ivf= 0 where cid= ?
update.reset.contest.5=update language_stats_contest set ac= 0,wa= 0,pe= 0,rte= 0,ce= 0,mle= 0,fle= 0,ole= 0,tle= 0,uq= 0,ivf= 0 where cid= ?

            

update.reset.contest.user=update user_contest set penalty = 0,accepted = 0,lastacc = now(),points = 0 where cid = ? and uid = ?
update.reset.contest.user.2=UPDATE user_contest  set current_level= 1,a_time= 100000000,b_time= 100000000,c_time= 100000000,d_time= 100000000,e_time= 100000000,f_time= 100000000,g_time= 100000000,h_time= 100000000,i_time= 100000000,j_time= 100000000,k_time= 100000000,l_time= 100000000,a_beforeac= 0,b_beforeac= 0,c_beforeac= 0,d_beforeac= 0,e_beforeac= 0,f_beforeac= 0,g_beforeac= 0,h_beforeac= 0,i_beforeac= 0,j_beforeac= 0,k_beforeac= 0,l_beforeac= 0,a_afterac= 0,b_afterac= 0,c_afterac= 0,d_afterac= 0,e_afterac= 0,f_afterac= 0,g_afterac= 0,h_afterac= 0,i_afterac= 0,j_afterac= 0,k_afterac= 0,l_afterac= 0,a_pending= 0,b_pending= 0,c_pending= 0,d_pending= 0,e_pending= 0,f_pending= 0,g_pending= 0,h_pending= 0,i_pending= 0,j_pending= 0,k_pending= 0,l_pending= 0 where cid= ? and uid=?
update.reset.contest.user.3=update user_stats_contest set ac= 0,wa= 0,pe= 0,rte= 0,ce= 0,mle= 0,fle= 0,ole= 0,tle= 0,uq= 0 where cid= ? and uid=?

update.submission.2=update source set code= ? where sid= ?
update.submission.contest=update contest_submition set time= ?,memory= ?,fontsize= ?,status= ?,testcase=?,max_case=?,min_case= ?,average_case=? where submit_id= ?
update.submission=update submition set time= ?,memory= ?,fontsize= ?,status= ?,enabled= ? where submit_id= ?
update.submit=UPDATE submition SET accepted=?,status=?,time=?,memory=?,testcase=?,max_case=?,min_case= ?,average_case=?,ac_cases=? where submit_id= ?
update.contest.submit=UPDATE contest_submition SET accepted=?,status=?,time=?,memory=?,testcase=?,max_case=?,min_case= ?,average_case=? where submit_id= ?
update.user.1=update users set nick= ?,country_id= ?, inst_id= ?, lid= ?, locale= ?, enableadveditor = ? where uid= ?
update.user.2=update users set nick= ?,country_id= ?, inst_id= ?, lid= ?, locale= ?, password= ?,problem_notifications=?,contest_notifications= ?,submition_notifications= ?,newprivatemessage_notifications= ?,wboard_notifications= ?,entries_notifications= ?,show_email= ?, gender= ?, see_solutions= ?, enableadveditor = ? where username= ?
update.user.3=update users set nick= ?,country_id= ?, inst_id= ?, lid= ?, locale= ?, problem_notifications=?,contest_notifications= ?,submition_notifications= ?,newprivatemessage_notifications= ?,wboard_notifications= ?,entries_notifications= ?,show_email= ?, gender= ?, see_solutions= ?, enableadveditor = ? where username= ?
update.user.by.admin.1=update users set nick= ?,country_id= ?, inst_id= ?, lid= ?, locale= ?,contest_notifications= ?,submition_notifications= ?,newprivatemessage_notifications= ?,wboard_notifications= ?,problem_notifications=?,entries_notifications= ?,show_email= ?, gender= ?,access_rule= ?,enabled= ?, update_nick = ? where username= ?
update.user.4=update user_profile set email=?, fullname= ?,lastname= ?, dob= '<dob>', show_dob= ?, view_problem_info = ? where uid= ?
update.user.by.admin.2=update user_profile set fullname= ?,lastname= ?, dob= '<dob>', show_dob= ?,email= ?,mail_quote= ? where uid= ?
update.user.by.admin.3=update team_profile set coach=?,user_1 = ?,user_2 = ?,user_3 = ? where uid = ?
update.user.by.admin=update users set nick= ?,country_id= ?, inst_id= ?, lid= ?, locale= ?, password= ?,contest_notifications= ?,submition_notifications= ?,newprivatemessage_notifications= ?,wboard_notifications= ?,problem_notifications=?,entries_notifications= ?,show_email= ?, gender= ?,access_rule= ?,enabled= ?, update_nick = ? where username= ?
update.user.clarification=update user_clarification set read= true where id_clarification= ? and teamfor= ?
update.user.profile.substract=UPDATE user_profile set points= points - ? where uid in (select uid from submition where pid= ? and status= 'Accepted' and uid != ?) and (points - ?) >= 0
update.user.profile.2=update user_profile set points= points + ? where uid= ?
update.user.profile.add=UPDATE user_profile set points= points + ? where uid in (select uid from submition where pid= ? and status= 'Accepted')
update.user.profile.uaccu=update user_stats set uaccu = uaccu + 1 where uid = ?
update.user.profile.uaccu.for.removal=update user_stats set uaccu = uaccu - 1 where uid = ?
update.user.stats.after.submition=update user_stats set <key>= <key> + 1 where uid= ?
update.user.stats.after.submition.for.removal=update user_stats set <key>= <key> - 1 where uid= ?
is.first.accepted=select not exists(select submit_id from submition where accepted=true and submit_id < ? and pid = ? and uid = ?)
select.submit.for.removal=select max_total_execution_time as time_limit, max_case_execution_time as case_time_limit, max_memory as memory_limit,source.code as source,problem.special_judge,status,submition.pid,submition.uid,submition.submit_id as sid,submition.language as lang,submition.time as time_used, submition.memory as memory_used, accepted from submition join source on submition.submit_id = source.sid join problem on submition.pid = problem.pid join problem_limits on problem.pid = problem_id join language on lid = problem_limits.language_id and submition.language = language.language where submit_id = ?
select.contest.submit.for.removal=select cid,max_total_execution_time as time_limit, max_case_execution_time as case_time_limit, max_memory as memory_limit,contest_source.code as source,problem.special_judge,status,contest_submition.pid,contest_submition.uid,contest_submition.submit_id as sid,contest_submition.language as lang,contest_submition.time as time_used, contest_submition.memory as memory_used, accepted from contest_submition join contest_source on contest_submition.submit_id = contest_source.sid join problem on contest_submition.pid = problem.pid join problem_limits on problem.pid = problem_id join language on lid = problem_limits.language_id and contest_submition.language = language.language where submit_id = ?
update.submit.for.removal=update submition set status='Judging',accepted=false,first_ac=false where submit_id=?
update.contest.submit.for.removal=update contest_submition set status='Judging',accepted=false where submit_id=?
update.contest.submit.for.disabling=update contest_submition set status='Judging',accepted=false where submit_id=?


update.user.status=update users set online= ? where username= ?
update.user=update users set nick= ?,country_id= ?, inst_id= ?, lid= ?, locale= ?, password= ?, enableadveditor = ? where uid= ?
update.users.startup=update users set online= false
update.vcont.2=update individual_virtual_contest set end_time= start_time + (select enddate-initdate from contest where cid= ?) where cid= ? and username= ?
update.vcont.3=insert into user_contest (cid,uid,virtual) values(?,(select uid from users where username= ?),?)
update.virtual.contest.2=update individual_virtual_contest set end_time= start_time + (select enddate-initdate from contest where cid= ?) where cid= ? and username= ?
update.virtual.contest.3=insert into user_contest (cid,uid,virtual) values(?,(select uid from users where username= ?),?)
userid.by.passcode=select uid from user_profile where passcode=?
user.draft=SELECT title || '...' as title,draft.date, draft_id as idmail,size from draft where username= ? order by draft.date desc limit 20 offset ?
user.has.practice.created=select exists(select cid from contest where virtual = true and enddate > now() and uid = ?)
user.score.enabled.inst=select sum(points) from users join user_profile using(uid) where users.enabled= true and inst_id= ?
user.score=select sum(points) from users join user_profile using (uid) where users.country_id= ? and users.enabled= true
select.uid.by.username=select uid from users where username=?
users.in.contest=select username from user_contest join users on users.uid= user_contest.uid where cid= ?
vcont.problem=SELECT problem_contest.pid,title,level from problem_contest  join problem on problem.pid= problem_contest.pid where cid= ? order by level limit 50 offset ?
virtual.contest.problem=SELECT problem_contest.pid,title,level from problem_contest  join problem on problem.pid= problem_contest.pid where cid= ? order by level limit 50 offset ?
virtual.contest.problems=select title,pid from problem join problem_contest using (pid) where cid = (select father from individual_virtual_contest where username = ?) 
virtual.running=SELECT cid from contest  where now() >= initdate and uid= ? and virtual=true
virtual.submission.time=select initdate + (now() - start_time) from individual_virtual_contest join contest on contest.cid= individual_virtual_contest.cid where individual_virtual_contest.vid= ? and individual_virtual_contest.username= ?
count.users.by.status=select tbl2.count,v.column1 as status from (select case when enabled is false and ban_reason is null then 'disabled' when enabled is false and ban_reason is not null then 'banned' when days >= 30 and days < 90 then 'dormant' when days >= 90  or days is null then 'inactive' else 'active' end as status,count(*) from (select enabled,ban_reason,cast (extract (day from last_connected_date - now() )as integer)*-1 as days from users u join user_profile using (uid)) tbl group by status) tbl2 right join (select column1 from (values ('active'),('banned'),('disabled'),('dormant'),('inactive')) status) v on tbl2.status = v.column1 
email.by.username=select email from users join user_profile using(uid) where username = ?
email.by.username.if.newprivatemessagenotif=select email from users join user_profile using(uid) where newprivatemessage_notifications = true and username = ?
#Web Services
ws.user.load.data=select users.uid,username,nick,email,fullname,lastname,institution.zip as instcode,country.zip as countrycode,country.name as countryname,institution.name as instname,points,ac as acc,wa,rte,tle,mle,ce,fle,pe,ole,last_accepted,last_submission,users.country_id as countryid,users.inst_id as instid,registration_date as rgdate,gender,locale.description as guilanguage,language.language as planguage from  public.users join institution on institution.inst_id= public.users.inst_id  join country on country.country_id= public.users.country_id join user_stats on user_stats.uid= public.users.uid join user_profile on users.uid= user_profile.uid join locale on locale.lid= users.locale join language on language.lid= users.lid where username= ?
ws.problem.load.data=select pid,title,description,input,output,input_example as inputexample,output_example as outputexample,problem.id_source,problem_source.name || ' - ' || problem_source.author as author,comments as hints,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid where disable_24h= false and enable= TRUE and pid= ?
ws.problem.list=select pid,title,description,input,output,input_example as inputexample,output_example as outputexample,problem.id_source,problem_source.name || ' - ' || problem_source.author as author,comments as hints,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid where disable_24h= false and enable= TRUE order by pid asc limit ? offset ?
ws.problem.search.bytitleandid=select pid,title,description,input,output,input_example as inputexample,output_example as outputexample,problem.id_source,problem_source.name || ' - ' || problem_source.author as author,comments as hints,problem.time,memory,fontsize,problem.date,problem.uid,username,case_time_limit as casetimelimit,multidata from problem join problem_source on problem_source.id_source = problem.id_source join users on problem.uid= users.uid where disable_24h= false and enable= TRUE and (title ilike ? or pid = ?) order by pid asc limit ? offset ?
ws.problem.exist.by.pid=select exists(select pid from problem where disable_24h= false and enable= TRUE and pid = ?)
ws.problem.solvedlist=select username from users join user_problem on users.uid = user_problem.user_id where accepted=true and problem_id = ?
ws.problem.classifications=select name from classifications join problem_classification using(id_classification)  where pid = ?


is.shared.file=select exists(select name from shared_files where path = ?)
count.list.shared.files=select count(*) from shared_files
list.shared.files=select * from shared_files limit 30 offset ?
count.list.shared.files.pattern=select count(*) from shared_files where name like ?
list.shared.files.pattern=select * from shared_files where name like ? limit 30 offset ?;


problem.unmark.favorite.byuser=delete from user_problem_favorite where user_id= ? and problem_id= ?
delete.user.problem.id=delete from user_problem where user_id=? and problem_id=?
delete.clarification=delete from user_clarification where teamfor= ? and id_clarification= ?
delete.contest.submit=delete from contest_submition where username= ? and virtual= true
delete.activationrecord.by.username=delete from account_activation where username= ?
delete.course.material=DELETE FROM chapter_content  where content_type  = 2 and chapter_id = (select chapter_id from chapter where course_id = ? and chapter_number = ?) and content_id = ?
delete.shared.file=delete from shared_files where path = ?

delete.problemsource=delete from problem_source where id_source=?
clear.psetters.pid=delete from psetter_problem where problem_id=?
clear.psetters.uid=delete from psetter_problem where user_id=?
clear.contest.judges=delete from contest_judges where cid= ?
clear.problem.contest.1=delete from problem_contest where cid= ?
clear.problem.contest.2=delete from problem_stats_contest where cid= ?
clear.prog.lang.2=delete from language_stats_contest where cid= ?
clear.prog.lang.cid=delete from language_contest where cid= ?
clear.prog.lang.pid=delete from problem_language where pid= ?
clear.user.authorities=delete from authorities where username= ?
clear.problem.limits=delete from problem_limits where problem_id = ?
delete.activationrecord=delete from account_activation where act_id= ?
delete.announcement=delete from announcements where aid= ?
delete.course.user=delete from course_users where username = ? and course_id = ?
delete.draft.mail.iddraft=delete from draft where draft_id= ? and username= ?
delete.draft.mail.username=delete from draft where username= ?
delete.faq=delete from faq where id = ?
delete.contest=delete from contest where cid= ?
delete.individual.virtual.contest=delete from individual_virtual_contest where username= ?
delete.language.contest=delete from language_contest where cid= ?
delete.language.stats.contest=delete from language_stats_contest where cid= ?
delete.news=delete from news where nid= ?
delete.plagicoj.result.judge.rev=DELETE FROM plagicoj_result_judge_revision WHERE id_plagicoj_result_judge_revision= ?
delete.problem.classification=DELETE FROM problem_classification where pid= ? AND id_classification= ?
delete.problem.contest=delete from problem_contest where cid= ? and pid= ?
delete.problem.stats.contest=delete from problem_stats_contest where cid=? and pid= ?
delete.problems.chapter=DELETE FROM chapter_content  where chapter_id = ? and content_type = 1
delete.rule=delete from global_access_rules where rid= ?
delete.user=delete from users where uid=?
delete.user.1=delete from user_profile where uid=?
delete.user.2=delete from user_stats where uid=?
delete.user.3=delete from authorities where username=?
delete.user.following=delete from followers where uid=? or fid = ?
delete.user.clarification=delete from user_clarification where teamfor= ? and id_clarification= ?
delete.user.contest.1=delete from user_stats_contest where cid= ?
delete.user.contest.2=delete from user_stats_contest where cid= ? and uid= ?
delete.user.contest.3=delete from contest_judges where cid= ?
delete.user.contest.4=delete from user_contest where cid= ?
delete.user.contest.5=delete from user_contest where cid= ? and uid= ?
delete.user.stats.contest=delete from user_stats_contest where cid= ? and uid= ?
delete.users.course=delete from course_users where course_id = ?
delete.vcont.2=delete from contest_submition where username= ? and virtual= true
delete.vcont.3=delete from user_contest where uid= (select uid from users where username= ?) and virtual= true
delete.user.contest=delete from user_contest where uid= ? and cid=?
delete.user.contest.cid=delete from user_contest where cid=?
delete.vcont=delete from individual_virtual_contest where username= ?
delete.virtual.contest.2=delete from contest_submition where username= ? and virtual= true
delete.virtual.contest.3=delete from user_contest where uid= (select uid from users where username= ?) and virtual= true
delete.virtual.contest.guest=delete from virtual_contest_guest where username= ?
delete.virtual.contest=delete from individual_virtual_contest where username= ?
delete.virtual.contest.problem=delete from problem_contest where cid = ?
limit.datasets.qty=delete from datasets where id <=(select max(id) - ? from datasets)
update.reply.clarification.1=delete from user_clarification where id_clarification= ?
update.reply.clarification.2=delete from clarification where id_clarification= ?
update.user.contest.last.acc=update user_contest set lastacc=(select case when max(date) is null then (select creation_time from contest where cid=?) else max(date) end from contest_submition where cid=? and uid=? and accepted) where uid=? and cid = ?
update.user.contest.accepted=update user_contest set accepted= sqry.accu from (select count(distinct pid) as accu from contest_submition where cid=? and accepted and uid=?) as sqry where user_contest.uid=? and cid=?
update.user.points.free.contest=update user_contest set points = sqry.points from (select uid,coalesce(sum(points),0) as points from (select uid,problem_contest.pid, (select ppoints from contest where cid=?)/cast (problem_contest.accu as float) as points from contest_submition join problem_contest on problem_contest.pid = contest_submition.pid and problem_contest.cid=contest_submition.cid where contest_submition.cid=? and accepted group by contest_submition.uid,problem_contest.pid,problem_contest.accu order by uid ) tbl group by uid ) sqry where user_contest.cid = ? and user_contest.uid = sqry.uid
update.user.points.progressive.contest=update user_contest set points = sqry.points from (select uid,coalesce(sum(points),0) as points from (select uid,problem_contest.pid, (select ppoints*1.0/(levels - problem_contest.level + 1)*1.0 from contest where cid=?) as points from contest_submition join problem_contest on problem_contest.pid = contest_submition.pid and problem_contest.cid=contest_submition.cid where contest_submition.cid=? and accepted group by contest_submition.uid,problem_contest.pid,problem_contest.accu,problem_contest.level order by uid ) tbl group by uid ) sqry where user_contest.cid = ? and user_contest.uid = sqry.uid

translation.insert=insert into translation_pending (username, date, pid, locale, title, description, input, output, comments) values(?,?,?,?,?,?,?,?,?)
translation.count=select count(*) from translation_pending
translation.delete=delete from translation_pending where id = ?
translation.get=select id, username, date, pid, locale, title, description, input, output, comments from translation_pending where id = ?
translation.approve.en=update problem set title=?, description=?, input=?, output=?, comments=? where pid=?
translation.approve.es=update problem set title_es=?, description_es=?, input_es=?, output_es=?, comments_es=? where pid=?
translation.approve.pt=update problem set title_pt=?, description_pt=?, input_pt=?, output_pt=?, comments_pt=? where pid=?

contribution.insert=insert into contributions (uid, cid) values( (select uid from users where username=? ) ,?)
select.user.classif=select name,sum(case when complexity = 1 and existent=1 then 1 else 0 end) as "1",sum(case when complexity = 2 and existent=1 then 1 else 0 end) as "2",sum(case when complexity = 3 and existent=1 then 1 else 0 end) as "3",sum(case when complexity = 4 and existent=1 then 1 else 0 end) as "4",sum(case when complexity = 5 and existent=1 then 1 else 0 end) as "5",sum(case when complexity = 1 and existent=1 then 1 else 0 end)*1+sum(case when complexity = 2 and existent=1 then 1 else 0 end)*2+sum(case when complexity = 3 and existent=1 then 1 else 0 end)*3+sum(case when complexity = 4 and existent=1 then 1 else 0 end)*4+sum(case when complexity = 5 and existent=1 then 1 else 0 end)*5 as top from (select *,1 as existent from user_problem where user_id = ? and accepted ) user_problem right join problem_classification on pid = problem_id join classifications using (id_classification) group by name order by name
select.prob.classif=select name,sum(case when complexity = 1 then 1 else 0 end) as "1",sum(case when complexity = 2 then 1 else 0 end) as "2",sum(case when complexity = 3 then 1 else 0 end) as "3",sum(case when complexity = 4 then 1 else 0 end) as "4",sum(case when complexity = 5 then 1 else 0 end) as "5",sum(case when complexity = 1 then 1 else 0 end)*1+sum(case when complexity = 2 then 1 else 0 end)*2+sum(case when complexity = 3 then 1 else 0 end)*3+sum(case when complexity = 4 then 1 else 0 end)*4+sum(case when complexity = 5 then 1 else 0 end)*5 as top from problem_classification join classifications using (id_classification) group by name order by name
select.user.timeline=select to_char(to_timestamp(to_char(tbl2.month, '999'), 'MM'), 'Mon') || ' ' || tbl2.year as label, coalesce(ac,0) as ac,coalesce(error,0) as error from(select extract(year from date) as year, extract(month from date) as month,sum(case when accepted then 1 else 0 end) as ac,sum(case when accepted then 0 else 1 end) as error  from submition where uid=? group by extract(year from date), extract(month from date)) tbl right outer join (select * from generate_series((select cast (min(extract(year from date)) as integer) from submition where uid = ?), cast (extract(year from now()) as integer)) as year,generate_series(1,12) as month) tbl2 on tbl.month = tbl2.month and tbl.year = tbl2.year order by tbl2.year,tbl2.month  
classification.delete=DELETE FROM classifications where id_classification = ?
count.language.name=  SELECT COUNT(language.language) FROM language WHERE language=?
select.count.problem.classifications=SELECT COUNT(problem.pid) FROM problem WHERE pid=?


select.author.problem.id=SELECT author FROM problem where pid=?

#frankr ioi start
#insert.datasetverdict=insert into  (sid,testnum,message,status,"userTime","cpuTime",memory) values (?,?,?,?,?,?,?)
#remove.datasetverdict.by.sid=delete from dataset_verdict where sid=?
#get.datasetverdicts.by.sid=select sid, testnum, message, status, "userTime", "cpuTime", memory from dataset_verdict where sid=? order by testnum

get.datasetverdictsjson.by.sid=select json_data from dataset_verdict_json where sid=?
insert.datasetverdictsjson=insert into dataset_verdict_json (sid,json_data) values (?,?)
remove.datasetverdictjson.by.sid=delete from dataset_verdict_json where sid=?

#usados en el comparador por etiquetas
exist.username=select exists(select uid from users where username= ?)
public.problems.tried.by.uid.and.tagid=SELECT DISTINCT user_problem.problem_id as pid,problem.title as problemTitle, complexity from user_problem join problem on user_problem.problem_id=problem.pid join problem_classification on problem.pid=problem_classification.pid where user_problem.accepted=false and enable=true and disable_24h=false and user_problem.user_id= ? and problem_classification.id_classification = ?
public.problems.solved.by.uid.and.tagid=SELECT DISTINCT user_problem.problem_id as pid,problem.title as problemTitle, complexity from user_problem join problem on user_problem.problem_id=problem.pid join problem_classification on problem.pid=problem_classification.pid where user_problem.accepted=true and enable=true and disable_24h=false and user_problem.user_id= ? and problem_classification.id_classification = ?
classification.name.by.id=select name from classifications where id_classification= ?
public.problems.solved.by.uid=SELECT DISTINCT user_problem.problem_id as pid,problem.title as title from user_problem join problem on user_problem.problem_id=problem.pid where user_problem.accepted=true and enable=true and disable_24h=false and user_problem.user_id= ? order by pid
public.problems.tried.by.uid=SELECT DISTINCT user_problem.problem_id as pid,problem.title as title from user_problem join problem on user_problem.problem_id=problem.pid where user_problem.accepted=false and enable=true and disable_24h=false and user_problem.user_id= ? order by pid
#frankr ioi end
get.source.code.contest = select submit_id,submition.language as lang,code,code as even,submition.date, status,submition.time,max_case,min_case,average_case as average,testcase,submition.username,submition.memory,submition.fontsize as font,pid,submition.uid,language.lid,language.key from contest_submition as submition join contest_source as source on source.sid= submition.submit_id join language on language.language= submition.language where submition.cid= ?