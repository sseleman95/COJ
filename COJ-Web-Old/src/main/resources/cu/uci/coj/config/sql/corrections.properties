delete.user.problem.tmp=delete from user_problem_tmp;
insert.user.problem.tmp=insert into user_problem_tmp select * from user_problem;
delete.user.problem=delete from user_problem;
insert.user.problem.all=insert into user_problem(user_id,problem_id,accepted,lock) select uid as user_id,pid as problem_pid,max(case when accepted then 1 else 0 end)=1 as accepted,false as lock from submition group by uid,pid
update.user.problem.lock=update user_problem set lock = sqry.lock from (select lock,user_id,problem_id from user_problem_tmp) as sqry where user_problem.user_id = sqry.user_id and user_problem.problem_id = sqry.problem_id;

calculate.problem.stats24h=insert into problem_stats (pid,ac,wa,ce,rte,tle,mle,ole,pe,uq,ivf) select pid, sum(acc) as ac,sum(wa) as wa, sum(ce) as ce,sum(rte) as rte,sum(tle) as tle,sum(mle) as mle,sum(ole) as ole,sum(pe) as pe, sum(uq) as uq,sum(ivf) as ivf from (select pid,case when cs.enabled=true and status = 'Accepted' then cast (count(*) as integer) else 0 end as acc, case when cs.enabled=true and status = 'Compilation Error' then cast (count(*) as integer) else 0 end as ce, case when cs.enabled=true and status = 'Memory Limit Exceeded' then cast (count(*) as integer) else 0 end as mle, case when cs.enabled=true and (status = 'Time Limit Exceeded') then cast (count(*) as integer) else 0 end as tle, case when cs.enabled=true and status = 'Runtime Error' then cast (count(*) as integer) else 0 end as rte, case when cs.enabled=true and status = 'Wrong Answer' then cast (count(*) as integer) else 0 end as wa, case when cs.enabled=true and status = 'Presentation Error' then cast (count(*) as integer) else 0 end as pe, case when cs.enabled=true and status = '"Output Limit Exceeded"' then cast (count(*) as integer) else 0 end as ole, case when cs.enabled=true and status = 'Size Limit Exceeded' then cast (count(*) as integer) else 0 end as sle, case when cs.enabled=true and status = 'Invalid Function' then cast (count(*) as integer) else 0 end as ivf, case when cs.enabled=true and status = 'Unqualified' then cast (count(*) as integer) else 0 end as uq from problem p left join submition cs using (pid) group by cs.enabled, pid,status) tbl group by pid; 
delete.problem.stats24h=delete from problem_stats
update.problem.stats24h=update problem_stats set accu = sqry.accu from (select pid,case when count(distinct uid) is null then 0 else count(distinct uid) end as accu from submition where status='Accepted' and enabled=true group by pid) as sqry where problem_stats.pid = sqry.pid;


calculate.user.stats24h=insert into user_stats (uid,ac,wa,ce,rte,tle,mle,ole,pe,uq,ivf,last_submission,last_accepted) select uid, sum(acc) as ac,sum(wa) as wa, sum(ce) as ce,sum(rte) as rte,sum(tle) as tle,sum(mle) as mle,sum(ole) as ole,sum(pe) as pe, sum(uq) as uq,sum(ivf) as ivf, max(last_submission),max(last_accepted) from (select uid,cs.status,max(date) as last_submission, case when cs.status = 'Accepted' then max(date) else null end as last_accepted, case when cs.enabled=true and cs.status = 'Accepted' then cast (count(*) as integer) else 0 end as acc, case when cs.enabled=true and cs.status = 'Compilation Error' then cast (count(*) as integer) else 0 end as ce, case when cs.enabled=true and cs.status = 'Memory Limit Exceeded' then cast (count(*) as integer) else 0 end as mle, case when cs.enabled=true and (cs.status = 'Time Limit Exceeded') then cast (count(*) as integer) else 0 end as tle, case when cs.enabled=true and cs.status = 'Runtime Error' then cast (count(*) as integer) else 0 end as rte, case when cs.enabled=true and cs.status = 'Wrong Answer' then cast (count(*) as integer) else 0 end as wa, case when cs.enabled=true and cs.status = 'Presentation Error' then cast (count(*) as integer) else 0 end as pe, case when cs.enabled=true and cs.status = '"Output Limit Exceeded"' then cast (count(*) as integer) else 0 end as ole, case when cs.enabled=true and cs.status = 'Size Limit Exceeded' then cast (count(*) as integer) else 0 end as sle, case when cs.enabled=true and cs.status = 'Invalid Function' then cast (count(*) as integer) else 0 end as ivf, case when cs.enabled=true and cs.status = 'Unqualified' then cast (count(*) as integer) else 0 end as uq from users u left join submition cs using (uid) group by cs.enabled, uid,cs.status) tbl group by uid 
delete.user.stats24h=delete from user_stats
update.user.stats24h=update user_stats set uaccu = sqry.uaccu from (select uid,case when count(distinct pid) is null then 0 else count(distinct pid) end as uaccu from submition where status='Accepted' and enabled=true group by uid) as sqry where user_stats.uid = sqry.uid

calculate.stats24h=insert into language_stats (lid,ac,wa,ce,rte,tle,mle,ole,pe,uq,ivf) select lid,sum(acc) as ac,sum(wa) as wa,sum(ce) as ce,sum(rte) as rte,sum(tle) as tle,sum(mle) as mle,sum(ole) as ole,sum(pe) as pe,sum(uq) as uq,sum(ivf) as ivf from (select lid,status,case when status = 'Accepted' then cast (count(*) as integer) else 0 end as acc,case when status = 'Compilation Error' then cast (count(*) as integer) else 0 end as ce,case when status = 'Memory Limit Exceeded' then cast (count(*) as integer) else 0 end as mle,case when (status = 'Time Limit Exceeded') then cast (count(*) as integer) else 0 end as tle,case when status = 'Runtime Error' then cast (count(*) as integer) else 0 end as rte,case when status = 'Wrong Answer' then cast (count(*) as integer) else 0 end as wa,case when status = 'Presentation Error' then cast (count(*) as integer) else 0 end as pe,case when status = '"Output Limit Exceeded"' then cast (count(*) as integer) else 0 end as ole,case when status = 'Size Limit Exceeded' then cast (count(*) as integer) else 0 end as sle,case when status = 'Invalid Function' then cast (count(*) as integer) else 0 end as ivf,case when status = 'Unqualified' then cast (count(*) as integer) else 0 end as uq from submition cs join language l using (language) where cs.enabled=true group by lid,status) tbl group by lid 
delete.stats24h=delete from language_stats

calculate.user.points=update user_profile set points=tbl3.points from (select sum(?/(40.0+ac)) as points,uid from (select count(*) over (partition by pid) as ac,pid,uid from (select pid,uid,min(submit_id) from submition where status='Accepted' and enabled=true group by pid,uid) tbl) tbl2 group by uid) as tbl3 where tbl3.uid = user_profile.uid

calculate.user.contest.stats=insert into user_stats_contest (uid,ac,wa,ce,rte,tle,mle,ole,pe,cid,uq,ivf) select uid,sum(acc) as ac,sum(wa) as wa,sum(ce) as ce,sum(rte) as rte,sum(tle) as tle,sum(mle) as mle,sum(ole) as ole, sum(pe) as pe,cid,sum(uq) as uq,sum(ivf) as ivf from (select uc.uid,uc.cid,status,case when status = 'Accepted' then cast (count(*) as integer) else 0 end as acc,case when cs.enabled=true and status = 'Compilation Error' then cast (count(*) as integer) else 0 end as ce,case when cs.enabled=true and status = 'Memory Limit Exceeded' then cast (count(*) as integer) else 0 end as mle, case when cs.enabled=true and (status = 'Time Limit Exceeded') then cast (count(*) as integer) else 0 end as tle,case when cs.enabled=true and status = 'Runtime Error' then cast (count(*) as integer) else 0 end as rte, case when cs.enabled=true and status = 'Wrong Answer' then cast (count(*) as integer) else 0 end as wa,case when cs.enabled=true and status = 'Presentation Error' then cast (count(*) as integer) else 0 end as pe, case when cs.enabled=true and status = '"Output Limit Exceeded"' then cast (count(*) as integer) else 0 end as ole, case when cs.enabled=true and status = 'Size Limit Exceeded' then cast (count(*) as integer) else 0 end as sle, case when cs.enabled=true and status = 'Invalid Function' then cast (count(*) as integer) else 0 end as ivf,case when status = 'Unqualified' then cast (count(*) as integer) else 0 end as uq from user_contest uc left join contest_submition cs on uc.uid = cs.uid and uc.cid = cs.cid group by cs.enabled,status,uc.uid,uc.cid order by uid,status ) tbl  group by uid,cid order by uid,cid;
delete.user.contest.stats=delete from user_stats_contest
update.user.contest.stats=update user_stats_contest set ac = sqry.uaccu from (select uid, cid,case when count(distinct pid) is null then 0 else count(distinct pid) end as uaccu from contest_submition where status='Accepted' and virtual=false and enabled=true group by uid,cid) as sqry where sqry.uid = user_stats_contest.uid and sqry.cid = user_stats_contest.cid

calculate.stats.contest=insert into language_stats_contest (lid,ac,wa,ce,rte,tle,mle,ole,pe,cid,uq,ivf) select lid,sum(acc) as ac,sum(wa) as wa,sum(ce) as ce,sum(rte) as rte,sum(tle) as tle,sum(mle) as mle,sum(ole) as ole,sum(pe) as pe,cid,sum(uq) as uq,sum(ivf) as ivf from (select lid,cid,status,case when status = 'Accepted' then cast (count(*) as integer) else 0 end as acc,case when status = 'Compilation Error' then cast (count(*) as integer) else 0 end as ce,case when status = 'Memory Limit Exceeded' then cast (count(*) as integer) else 0 end as mle,case when (status = 'Time Limit Exceeded') then cast (count(*) as integer) else 0 end as tle,case when status = 'Runtime Error' then cast (count(*) as integer) else 0 end as rte,case when status = 'Wrong Answer' then cast (count(*) as integer) else 0 end as wa,case when status = 'Presentation Error' then cast (count(*) as integer) else 0 end as pe,case when status = '"Output Limit Exceeded"' then cast (count(*) as integer) else 0 end as ole,case when status = 'Size Limit Exceeded' then cast (count(*) as integer) else 0 end as sle,case when status = 'Invalid Function' then cast (count(*) as integer) else 0 end as ivf,case when status = 'Unqualified' then cast (count(*) as integer) else 0 end as uq from contest_submition cs join language l using (language) where cs.virtual=false and cs.enabled=true group by lid,cid,status) tbl group by lid,cid
delete.stats.contest=delete from language_stats_contest


delete.old.activations=delete from account_activation where registration = true and (now() - date) > '3 days'
select.unactivated.emails=select email,username,user_key as token,registration from account_activation join users using (username) join user_profile using (uid)
select.unactivated.email=select email,username,user_key as token,registration from account_activation join users using (username) join user_profile using (uid) where act_id=?

max.level.pass.by.uid=select case when max(level) is null then 0 else max(level) end as level from (select count(*) as aclevel,level,c.accepted_by_level as abl,count(*) >= c.accepted_by_level as fin from (select distinct pid, uid, cid, status from contest_submition) cs join problem_contest pc using (pid,cid) join contest c on cs.cid = c.cid where pc.cid= ? and cs.status='Accepted' and cs.uid = ? group by level,c.accepted_by_level having count(*) >= c.accepted_by_level order by level) tbl
correct.user.level=select username,* from user_contest join users using (uid) where cid=?
correct.user.top.level=select cs.uid from user_contest cs join contest c using (cid) where accepted>=c.accepted_limit and cs.cid= ? and c.virtual=false order by uid
update.user.level=update user_contest set current_level = ? where uid = ? and cid = ?

master.achievement.by.language=select language,aid from language where language != 'Text'
delete.achievements=delete from user_achievement where aid=?

calculate.language.master=insert into user_achievement (uid,aid,count,level) select uid,? as aid,count(distinct pid),case when count(distinct pid) < 10 then 0 when count(distinct pid) < 20 then 1 when count(distinct pid) < 50 then 2 when count(distinct pid) < 100 then 3 when count(distinct pid) >= 100 then 4 end as level from submition where status='Accepted' and enabled = true and language = ? group by uid
calculate.classification.master=insert into user_achievement (uid,aid,count,level) select uid,aid,count(distinct pid) as count,case when count(distinct pid) < 10 then 0 when count(distinct pid) < 20 then 1 when count(distinct pid) < 50 then 2 when count(distinct pid) < 100 then 3 when count(distinct pid) >= 100 then 4 end as level from submition s join problem_classification using (pid) join classifications using (id_classification) where status = 'Accepted' and enabled = true group by uid,aid
calculate.sniper=insert into user_achievement (uid,aid,count,level) select uid,? as aid, count, case when count >= 200 then 4 when count >= 100 then 3 when count>=50 then 2 when count >= 10 then 1 else 0 end as level from  (select uid,sum(first_ac) as count from (select uid,min(submit_id),min(case when accepted then 1 else 0 end) as first_ac from submition where pid != 1000 group by uid,pid ) tblu group by uid) tbl
calculate.polyglot=insert into user_achievement (uid,aid,count,level) select uid,? as aid,max(count), max(level) from (select uid,pid,count, case when count < 2 then 0 when count < 4 then 1 when count < 5 then 2 when count < 10 then 3 when count >=10 then 4 end as level from (select uid,pid,count(language) as count from (select uid, pid,language from submition where status = 'Accepted' and enabled = true and pid!=1000 group by uid,pid,language order by uid,pid ) tbl group by uid,pid ) tbl2 ) tbl3 group by uid 
calculate.inflate.balloon=insert into user_achievement (uid,aid,count,level) select uid,? as aid,count(distinct pid),case when count(distinct pid) < 1 then 0 when count(distinct pid) < 100 then 1 when count(distinct pid) < 500 then 2 when count(distinct pid) < 1000 then 3 when count(distinct pid) >= 1000 then 4 end as level from submition where accepted and enabled = true and pid != 1000 group by uid