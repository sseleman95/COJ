const int MAXN = 300;
int match[MAXN], px[MAXN], base[MAXN], N//cantidad de nodos;
bool used[MAXN], blossom[MAXN], lused[MAXN];
vector<int> graph[MAXN];//representacion del grafo

void mark_path(int v, int b, int children) {
	while (base[v] != b) {
		blossom[base[v]] = blossom[base[match[v]]] = true;
		px[v] = children;
		children = match[v];
		v = px[match[v]];
	}
}

int lca(int a, int b) {
	memset(lused, 0, N);
	while (1) {
		lused[a = base[a]] = true;
		if (match[a] == -1)
			break;
		a = px[match[a]];
	}
	while (1) {
		b = base[b];
		if (lused[b])
			return b;
		b = px[match[b]];
	}
}

int find_path(int root) {
	memset(used, 0, N);
	memset(px, -1, sizeof(int) * N);
	for (int i = 0; i < N; ++i)
		base[i] = i;
	used[root] = true;
	queue<int> q;
	q.push(root);
	register int v, e, to, i;
	while (!q.empty()) {
		v = q.front();
		q.pop();
		for (e = 0; e < graph[v].size(); ++e) {
			to = graph[v][e];
			if (base[v] == base[to] || match[v] == to)
				continue;
			if (to == root || (match[to] != -1 && px[match[to]] != -1)) {
				int curbase = lca(v, to);
				memset(blossom, 0, N);
				mark_path(v, curbase, to);
				mark_path(to, curbase, v);
				for (i = 0; i < N; ++i)
					if (blossom[base[i]]) {
						base[i] = curbase;
						if (!used[i]) {
							used[i] = true;
							q.push(i);
						}
					}
			} else if (px[to] == -1) {
				px[to] = v;
				if (match[to] == -1)
					return to;
				to = match[to];
				used[to] = true;
				q.push(to);
			}
		}
	}
	return -1;
}

void build_pre_matching() {
	register int u, e, v;
	for (u = 0; u < N; ++u)
		if (match[u] == -1)
			for (e = 0; e < graph[u].size(); ++e) {
				v = graph[u][e];
				if (match[v] == -1) {
					match[u] = v;
					match[v] = u;
					break;
				}
			}
}

void edmonds() {
	memset(match, 0xff, sizeof(int) * N);
	build_pre_matching();
	register int i, v, pv, ppv;
	for (i = 0; i < N; ++i)
		if (match[i] == -1) {
			v = find_path(i);
			while (v != -1) {
				pv = px[v], ppv = match[pv];
				match[v] = pv, match[pv] = v;
				v = ppv;
			}
		}
}