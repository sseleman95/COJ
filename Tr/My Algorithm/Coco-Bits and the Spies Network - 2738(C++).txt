#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cassert>
#include <cmath>
#include <complex>
#include <memory.h>
#include <time.h>
#include <list>

using namespace std;
typedef pair<double, pair<int, int> > edge;

edge edges[500 * 500];
int pnt[501][2], p[501], ids[500];

inline int find_set(int x) {
	return p[x] = (x != p[x]) ? find_set(p[x]) : x;
}

int main() {
	//freopen("f", "r", stdin);
	int n;
	scanf("%d", &n);
	for (int i = 0; i < n; ++i) {
		int id, x, y;
		scanf("%d%d%d", &id, &x, &y);
		pnt[id][0] = x, pnt[id][1] = y;
		ids[i] = id;
	}
	for (int i = 1; i <= 500; ++i) {
		p[i] = i;
	}
	int q;
	double sol = 0;
	scanf("%d", &q);
	while (q--) {
		int id1, id2;
		scanf("%d%d", &id1, &id2);
		sol += hypot(pnt[id1][0] - pnt[id2][0], pnt[id1][1] - pnt[id2][1]);
		p[find_set(id1)] = find_set(id2);
	}
	int l = 0;
	for (int i = 0; i < n; ++i) {
		for (int j = i + 1; j < n; ++j) {
			double d = hypot(pnt[ids[i]][0] - pnt[ids[j]][0],
					pnt[ids[i]][1] - pnt[ids[j]][1]);
			edges[l++] = make_pair(d, make_pair(ids[i], ids[j]));
		}
	}
	sort(edges, edges + l);
	for (int i = 0; i < l; ++i) {
		int nod1 = edges[i].second.first;
		int nod2 = edges[i].second.second;
		double w = edges[i].first;
		int set1 = find_set(nod1);
		int set2 = find_set(nod2);
		if (set1 != set2) {
			p[set1] = set2;
			sol += w;
		}
	}
	printf("%.2lf\n", sol);
}
