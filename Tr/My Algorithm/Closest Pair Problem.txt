#include<cstdio>
#include<algorithm>
#include<cmath>
#include<set>

using namespace std;

struct point{
       double x, y;
       point(){}
       point(double xx, double yy){x=xx; y=yy;}
       bool operator<(const point& B)const{return y<B.y;}
       };
bool cmpX(point A, point B){return A.x<B.x;}

inline double dist(point A, point B)
{
       return sqrt( (A.x-B.x)*(A.x-B.x)+(A.y-B.y)*(A.y-B.y) );
}
point P[10000];

int main()
{
   int N;
   while(scanf("%d",&N) && N)
   {
      double h = 10000;
      for(int i=0; i<N; i++)
         scanf("%lf%lf",&P[i].x,&P[i].y);
      sort(P,P+N,cmpX);
      set<point> S;
      set<point>::iterator u;
      int k=0;
      for(int i=0; i<N; i++)
      {
         for(;P[i].x-P[k].x>h; k++)
            S.erase(S.find(P[k]));
         point c = P[i];
         u = upper_bound(S.begin(), S.end(), point(0,c.y+h+1));
         for(set<point>::iterator it = lower_bound(S.begin(), S.end(), point(0,c.y-h-1)); it!=u; it++)
         {
            if(dist(*it,c)<h)
               h = dist(*it,c);
         }
         S.insert(P[i]);
      }
      if(h==10000) printf("INFINITY\n");
      else printf("%.4lf\n",h);
   }
} 