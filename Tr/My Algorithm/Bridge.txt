#define MAXE 100000

struct edge {
	int v, next;
} edges[MAXE];

#define MAXN 10000
#define FOR(i, n) for(i = 0; i < n; ++i)
int num[MAXN], inS[MAXN];
vector<pair<int, int> > brdg;
vector<vector<int> > tecomp;
int S[MAXN], roots[MAXN], last[MAXN];
int n, ndfs, topS, topR;
int i, m;

void visit(int v, int u) {
	inS[v] = num[v] = ++ndfs;
	S[topS++] = roots[topR++] = v;
	for (int i = last[v]; i != -1; i = edges[i].next) {
		int w = edges[i].v;
		if (!num[w])
			visit(w, v);
		else if (u != w && inS[w])
			while (num[roots[topR - 1]] > num[w])
				topR--;
	}
	if (v == roots[topR - 1]) {
		brdg.push_back(make_pair(u, v));
		tecomp.push_back(vector<int>());
		while (1) {
			int w = S[--topS];
			inS[w] = false;
			tecomp.back().push_back(w);
			if (v == w)
				break;
		}
		topR--;
	}
}
void Bridges_CompBiCnx() {
	FOR(i, n)
		num[i] = inS[i] = 0;
	topS = topR = 0;
	brdg.clear();
	tecomp.clear();
	ndfs = 1;
	FOR(i, n)
		if (!num[i]) {
			visit(i, n);
			brdg.pop_back();
		}
}