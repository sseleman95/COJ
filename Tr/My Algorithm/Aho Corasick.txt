#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cassert>
#include <cmath>
#include <complex>
#include <memory.h>
#include <time.h>
#include <list>

using namespace std;
#define MAXN 13000
#define MAXLEN 25
#define ALPHA 27

struct PMA {
	PMA *fail;
	PMA *next[ALPHA];
	int pos;
	PMA *link;

	PMA() :
			pos(-1), link(0) {
		memset(next, 0, sizeof(next));
	}
}*root;

int N;
char c;
PMA *t, *v;

char P[MAXN][MAXLEN];
int result[MAXN];

void build_AC_automaton() {
	root = new PMA;
	for (int i = 0; i < N; i++) {
		t = root;
		for (int j = 0; P[i][j] != '\0'; j++) {
			char c = P[i][j] - 'a';
			if (!t->next[c])
				t->next[c] = new PMA;
			t = t->next[c];
		}
		t->pos = i;
	}

	queue<PMA*> Q;
	for (int c = 0; c < ALPHA; c++) {
		if (root->next[c]) {
			root->next[c]->fail = root;
			Q.push(root->next[c]);
		} else
			root->next[c] = root;
	}

	while (!Q.empty()) {
		t = Q.front();
		Q.pop();
		for (int c = 0; c < ALPHA; c++) {
			if (t->next[c]) {
				Q.push(t->next[c]);
				v = t->fail;
				while (!v->next[c])
					v = v->fail;
				t->next[c]->fail = v->next[c];
				if (t->next[c]->fail->pos != -1)
					t->next[c]->link = t->next[c]->fail;
				else
					t->next[c]->link = t->next[c]->fail->link;
			}
		}
	}
}

char texts[20001][45];
map<string, int> location;
int Q;
int main() {
	//read texts
	scanf("%d", &Q);
	for (int i = 0; i < Q; ++i) {
		scanf("%s", texts[i]);
		strcat(texts[i], "{");
	}
	//read patterns
	scanf("%d", &N);
	for (int i = 0; i < N; i++) {
		scanf("%s", P[i]);
		location[P[i]] = i;
	}
	build_AC_automaton();
	t = root;
	for (int i = 0; i < Q; ++i) {
		int len = strlen(texts[i]);
		for (int j = 0; j < len; ++j) {
			c = texts[i][j];
			c -= 'a';
			while (!t->next[c])
				t = t->fail;
			t = t->next[c];
			if (t->pos != -1)
				result[t->pos]++;
			for (v = t->link; v; v = v->link)
				result[v->pos]++;
		}
	}
	for (int i = 0; i < N; i++)
		printf("%d\n", result[location[P[i]]]);
}
