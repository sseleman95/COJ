#include <algorithm>
#include <numeric>
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <stack>
#include <cstdio>
#include <cstdlib>
#include <cctype>
#include <cassert>
#include <cmath>
#include <complex>
#include <memory.h>
#include <time.h>
#include <list>

using namespace std;
#define MAXN 1000

vector<int> G[MAXN];
vector<int> MT;
vector<char> used;

bool try_kuhn(int V) {
	if (used[V])
		return false;
	used[V] = true;
	for (size_t i = 0; i < G[V].size(); ++i) {
		int to = G[V][i];
		if (MT[to] == -1 || try_kuhn(MT[to])) {
			MT[to] = V;
			return true;
		}
	}
	return false;
}

int main() {
	//freopen("f", "r", stdin);
	//complejidad O(n^2*k)
	//n cantidad de vertices en la primera mitad
	//k cantidad de vertices en la segunda mitad, E cantidad de aristas
	int n, k, E;
	scanf("%d%d%d", &n, &k, &E);
	for (int i = 0; i < E; ++i) {
		int u, v;
		scanf("%d%d", &u, &v);
		u--, v--;
		G[u].push_back(v);
	}
	MT.assign(k, -1);
	vector<char> used1(n);
	for (int i = 0; i < n; ++i)
		for (size_t j = 0; j < G[i].size(); ++j)
			if (MT[G[i][j]] == -1) {
				MT[G[i][j]] = i;
				used1[i] = true;
				break;
			}
	for (int i = 0; i < n; ++i) {
		if (used1[i])
			continue;
		used.assign(n, false);
		try_kuhn(i);
	}
	for (int i = 0; i < k; ++i)
		if (MT[i] != -1)
			printf("%d %d\n", MT[i] + 1, i + 1);
}
