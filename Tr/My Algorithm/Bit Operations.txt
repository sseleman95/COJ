Determine the number of bits 1 in the binary representation of n.
//via 1
int count(long n) {
	int num = 0;
	for (int i = 0; i < 32; i++)
		if (n & (1 << i))
			num++;
	return num;
}
//via 2
int count(long n) {
	int num = 0;
	if (n)
		do
			num++;
		while (n &= n - 1);
	return num;
}
//Determine the number of parity bits of a binary representation of a number of n.
int parity(long n) {
	n = ((0xFFFF0000 & n) >> 16) ^ (n & 0xFFFF);
	n = ((0xFF00 & n) >> 8) ^ (n & 0xFF);
	n = ((0xF0 & n) >> 4) ^ (n & 0xF);
	n = ((12 & n) >> 2) ^ (n & 3);
	n = ((2 & n) >> 1) ^ (n & 1);
	return n;
}
//Determine the least significant bit 1 in the binary representation of n.
int low1(long n) {
	return n ^ (n & (n - 1));
}
//Determine the most significant bit with value 1 in the binary representation of n.
int high1(long n) {
	long num = 0;
	if (!n)
		return -1;
	if (0xFFFF0000 & n) {
		n = (0xFFFF0000 & n) >> 16;
		num += 16;
	}
	if (0xFF00 & n) {
		n = (0xFF00 & n) >> 8;
		num += 8;
	}
	if (0xF0 & n) {
		n = (0xF0 & n) >> 4;
		num += 4;
	}
	if (12 & n) {
		n = (12 & n) >> 2;
		num += 2;
	}
	if (2 & n) {
		n = (2 & n) >> 1;
		num += 1;
	}
	return 1 << num;
}
//Index to determine the most significant bit 1 in the binary representation of n.
int indexHigh1(long n) {
	n = n | (n >> 1);
	n = n | (n >> 2);
	n = n | (n >> 4);
	n = n | (n >> 8);
	n = n | (n >> 16);
	return count(n) - 1;
}
//Determine if n is a power of 2 
int isTwoPower(long n) {
	return (n & (n - 1)) == 0;
}