import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		BufferedReader cin = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		long N, B, i, j, p, c, noz, k;
		while (true) {
			st = new StringTokenizer(cin.readLine());
			N = Long.parseLong(st.nextToken());
			B = Long.parseLong(st.nextToken());
			if (N == 0 && B == 0)
				break;
			noz = N;
			j = B;
			boolean test = true;
			for (i = 2; i <= B && j > 1; i++) {
				if(test && Fermat(j, 4))
					if(i <= j)
						i = j;
				if (j % i == 0) {
					test = true;
					p = 0;
					while (j % i == 0) {
						p++;
						j /= i;
					}
					c = 0;
					k = N;
					while (k / i > 0) {
						c += k / i;
						k /= i;
					}
					noz = Math.min(noz, c / p);
				} else
					test = false;
			}
			System.out.println(noz);
		}
	}

	static long rand(long i, long p) {
		if (i == 0)
			return 1;
		else if (i == 1)
			return p / i - 1;
		return p / i;
	}

	static boolean Fermat(long p, int iterations) {
		if (p <= 1)
			return false;
		for (int i = 0; i < iterations; i++) {
			long a = rand(i, p) % (p - 1) + 1;
			if (modulo(a, p - 1, p) != 1)
				return false;
		}
		return true;
	}

	static int modulo(long a, long b, long c) {
		long x = 1, y = a;
		while (b > 0) {
			if (b % 2 == 1) {
				x = (x * y) % c;
			}
			y = (y * y) % c;
			b /= 2;
		}
		return (int) (x % c);
	}
}

