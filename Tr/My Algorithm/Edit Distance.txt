//u es la primera cadena, m es el len de esta
//v es la segunda, n es el len de esta
int dp[MAXN][MAXN];

int find_best(char* u, char* v, int n, int m) {
	for (int i = 0; i <= m; i++)
		dp[i][0] = i;
	for (int i = 0; i <= n; i++)
		dp[0][i] = i;
	for (int i = 1; i <= m; i++)
		for (int j = 1; j <= n; j++)
			if (u[i - 1] == v[j - 1])
				dp[i][j] = dp[i - 1][j - 1];
			else
				dp[i][j] = min(dp[i][j - 1],
						min(dp[i - 1][j], dp[i - 1][j - 1])) + 1;
	if (u[m - 1] == v[n - 1])
		return dp[m - 1][n - 1];
	return dp[m][n];
}