#!/usr/bin/env python
################################################################################
# The Sandbox Libraries (Python) - Sample Script                               #
#                                                                              #
# Copyright (C) 2009-2013 LIU Yu, <pineapple.liu@gmail.com>                    #
# All rights reserved.                                                         #
#                                                                              #
# Redistribution and use in source and binary forms, with or without           #
# modification, are permitted provided that the following conditions are met:  #
#                                                                              #
# 1. Redistributions of source code must retain the above copyright notice,    #
#    this list of conditions and the following disclaimer.                     #
#                                                                              #
# 2. Redistributions in binary form must reproduce the above copyright notice, #
#    this list of conditions and the following disclaimer in the documentation #
#    and/or other materials provided with the distribution.                    #
#                                                                              #
# 3. Neither the name of the author(s) nor the names of its contributors may   #
#    be used to endorse or promote products derived from this software without #
#    specific prior written permission.                                        #
################################################################################

import os
import sys
import StringIO
import csv
import argparse
import numpy

try:
    # check platform type
    system, machine = os.uname()[0], os.uname()[4]
    if system not in ('Linux', ) or machine not in ('i686', 'x86_64', ):
        raise AssertionError("Unsupported platform type.\n")
    # check package availability / version
    import sandbox
    if not hasattr(sandbox, '__version__') or sandbox.__version__ < "0.3.4-3":
        raise AssertionError("Unsupported sandbox version.\n")
    from sandbox import *
except ImportError:
    sys.stderr.write("Required package(s) missing.\n")
    sys.exit(os.EX_UNAVAILABLE)
except AssertionError as e:
    sys.stderr.write(str(e))
    sys.exit(os.EX_UNAVAILABLE)

def loadArgs(args):
    parser = argparse.ArgumentParser(description='This is a sandboxing script used for UEngine running programs in a restricted environment.')    
    parser.add_argument('script', action = 'store')
    
    parser.add_argument('-id','--identifier', help='Program to be executed',required=True)
    parser.add_argument('-l','--language',help='Language program was written with', required=True, choices=['Text','C++','Java','C','C#','Perl','Python','Pascal','Ruby','PHP','Bash','C++11','Haskell','Prolog','VBasic','JavaScript-NodeJS',])
    parser.add_argument('-i','--input', help='Input file',required=True,type=argparse.FileType('r'))
    parser.add_argument('-o','--output',help='Output file', required=True,type=argparse.FileType('w'))    
    parser.add_argument('-e','--errors',help='Errors file', required=True,type=argparse.FileType('w'))
    
    parser.add_argument('-t','--time-limit',help='Time limit', required=True,type=int)
    parser.add_argument('-m','--memory-limit',help='Memory limit', required=True,type=int)
    parser.add_argument('-d','--disk-limit',help='Disk limit', required=False,type=int,default=1048576000)
    
    parser.add_argument('-g','--gen-int',help='Generate Interruptions file', action="store_true")
    parser.add_argument('-s','--sc_safe_i686',help='White list file of i686 linux syscalls (if not setted int language will be used to determine syscalls)',type=argparse.FileType('r'))
    parser.add_argument('-x','--sc-safe-x86-64',help='White list file of x86-64 linux syscalls (if not setted int language will be used to determine syscalls)', type=argparse.FileType('r'))
    
    parser.add_argument('-T','--trusted',help='Set when program is trusted', action="store_true")
    
    parser.add_argument('-p','--program', help='Program to be executed',required=True, nargs=argparse.REMAINDER)
    
    arguments = parser.parse_args(args)     
    return arguments

def main(args):
  # sandbox configuration
    working_dir_path = os.path.dirname(args.script)
    
    if args.sc_safe_i686 != None:
        sc_safe_i686  = args.sc_safe_i686
    else:
        sc_safe_i686 = open(working_dir_path+'/int/i686/'+args.language)

    if args.sc_safe_x86_64 != None:
        sc_safe_x86_64  = args.sc_safe_x86_64
    else:
        sc_safe_x86_64 = open(working_dir_path+'/int/x86_64/'+args.language)

    cookbook = {
        'args': numpy.asarray(args.program),               # targeted program
        'stdin': args.input,             # input to targeted program
        'stdout': args.output,           # output from targeted program
        'stderr': args.errors,           # error from targeted program
        'quota': dict(wallclock=int(args.time_limit),  # user time
                      cpu=int(args.time_limit),         # cpu time
                      memory=int(args.memory_limit),   # memory
                      disk=args.disk_limit)}    # lots of disk space

    # create a sandbox instance and execute till end
    
    MiniSandbox.reader_sc_safe_i686 = next(csv.reader(sc_safe_i686))
    MiniSandbox.reader_sc_safe_x86_64 = next(csv.reader(sc_safe_x86_64))
    MiniSandbox.trusted = args.trusted
    
    msb = MiniSandbox(**cookbook)    
    msb.run()
    probe = msb.probe()
    
    if args.gen_int:
        finterr = open(os.path.dirname(args.script)+"/gen-int/"+args.identifier, 'w')
        inter_set = sorted(msb.inter_set)
        for i in inter_set:
            finterr.write(str(i) + ", ")
        finterr.flush()
        finterr.close()
    
    if args.trusted:        
        inter_set_x86_64 = set()
        inter_set_i686  = set()

        keys = msb.sc_table.viewkeys()
        
        for key in keys:
            mode = int(key[1]) if machine == 'x86_64' else 1
            fkey = key[0] if machine == 'x86_64' else key
            
            if (mode == 0):
                inter_set_x86_64.add(fkey)
            else:
                inter_set_i686.add(fkey)
        
        inter_set_x86_64 = sorted(inter_set_x86_64)
        inter_set_i686 = sorted(inter_set_i686)
        
        sc_safe_x86_64 = open(sc_safe_x86_64.name, 'w')
        sc_safe_i686 = open(sc_safe_i686.name, 'w')
        
        first = True
        for i in inter_set_x86_64:    
            sc_safe_x86_64.write(", " + str(i) if first == False else str(i))
            first = False
            
        sc_safe_x86_64.flush()
        sc_safe_x86_64.close()
            
        first = True
        for i in inter_set_i686:
            sc_safe_i686.write(", " + str(i) if first == False else str(i))
            first = False
            
        sc_safe_i686.flush()
        sc_safe_i686.close()
    
    if not args.output.closed :
        args.output.flush()
        args.output.close()

    if not args.errors.closed :
        args.errors.flush()
        args.errors.close()

    # verbose statistics
    sys.stdout.write("%(result)s,%(elapsed)d,%(cpu)d,%(mem)d" % probe )
    return os.EX_OK


# mini sandbox with embedded policy
class MiniSandbox(SandboxPolicy, Sandbox):
    sc_table = None
    # result code translation table
    result_name = dict((getattr(Sandbox, 'S_RESULT_%s' % r), r) for r in
        ('PD', 'OK', 'RF', 'RT', 'TL', 'ML', 'OL', 'AT', 'IE', 'BP'))

    inter_set = set()
    reader_sc_safe_i686 = ''
    reader_sc_safe_x86_64 = '' 
    trusted = False
    
    def __init__(self, *args, **kwds):

        # initialize table of system call rules
        self.sc_table = dict()
               
        if machine == 'x86_64':            
            for inter in self.reader_sc_safe_x86_64:
                self.sc_table[(int(inter),0)] = self._CONT
            for inter in self.reader_sc_safe_i686:
                self.sc_table[(int(inter),1)] = self._CONT
        else:  # i686
            for inter in self.reader_sc_safe_i686:
                self.sc_table[int(inter)] = self._CONT
        # initialize as a polymorphic sandbox-and-policy object
        
        SandboxPolicy.__init__(self)
        Sandbox.__init__(self, *args, **kwds)
        self.policy = self  # apply local policy rules

    def probe(self):
        # add custom entries into the probe dict
        d = Sandbox.probe(self, False)
        d['cpu'] = d['cpu_info'][0]
        d['mem'] = d['mem_info'][1]
        d['result'] = MiniSandbox.result_name.get(self.result, 'NA')
        return d
      
    def __call__(self, e, a):
        # handle SYSCALL/SYSRET events with local rules
        if e.type in (S_EVENT_SYSCALL, S_EVENT_SYSRET):

            scinfo = (e.data, e.ext0) if machine == 'x86_64' else e.data

            self.inter_set.add(e.data)
          
            if self.trusted == True:
                self.sc_table[scinfo] = self._CONT
                
            rule = self.sc_table.get(scinfo, self._KILL_RF)
            return rule(e, a)

        return SandboxPolicy.__call__(self, e, a)

    def _CONT(self, e, a):  # continue
        a.type = S_ACTION_CONT
        return a

    def _KILL_RF(self, e, a):  # restricted func.
        a.type, a.data = S_ACTION_KILL, S_RESULT_RF
        return a


if __name__ == "__main__":
    args = loadArgs(sys.argv);
    sys.exit(main(args))
